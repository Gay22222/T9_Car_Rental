# ==================================================
# Path: E:\UIT\HK8\NT118\Project\T9_Car_Rental\app\src\main\java\com\uit\carrental
# Detected tech: java
# ==================================================

## DIRECTORY STRUCTURE
```
carrental/
├── ActivityPages/
│   ├── CustomerMainActivity.java
│   ├── OwnerMainActivity.java
│   └── StartAppActivity.java
├── Adapter/
│   ├── ActivityAdapter.java
│   ├── MessageAdapter.java
│   ├── NotificationAdapter.java
│   ├── OwnerActivityAdapter.java
│   ├── OwnerNotificationAdapter.java
│   ├── OwnerVehicleAdapter.java
│   ├── SplashPagerAdapter.java
│   ├── VehicleAdapter.java
│   └── ViewPagerAdapter.java
├── FragmentPages/
│   ├── Customer/
│   │   ├── ChatFragment.java
│   │   ├── CustomerActivityFragment.java
│   │   ├── CustomerHomeFragment.java
│   │   ├── CustomerNotificationFragment.java
│   │   └── CustomerSettingFragment.java
│   ├── Owner/
│   │   ├── OwnerActivityFragment.java
│   │   ├── OwnerNotificationsFragment.java
│   │   ├── OwnerSettingFragment.java
│   │   └── OwnerVehicleFragment.java
│   └── SplashFragment.java
├── Model/
│   ├── Activity.java
│   ├── CreateOrder.java
│   ├── Message.java
│   ├── Order.java
│   ├── User.java
│   ├── UserClient.java
│   ├── Vehicle.java
│   └── onClickInterface.java
└── Service/
    ├── Activity/
    │   ├── CustomerActivityDetail.java
    │   └── OwnerActivityDetail.java
    ├── Api/
    │   └── CloudinaryApi.java
    ├── Booking/
    │   ├── CarDetailActivity.java
    │   ├── RequestSuccessActivity.java
    │   └── ScheduleSelect.java
    ├── UserAuthentication/
    │   ├── CCCDActivity.java
    │   ├── ForgotPasswordActivity.java
    │   ├── GGVerrifyPhone.java
    │   ├── LoginActivity.java
    │   ├── ProfileManagement.java
    │   ├── RegisterActivity.java
    │   ├── UpdatePassword.java
    │   ├── UserProfile.java
    │   └── ValidatePhoneActivity.java
    ├── Vehicle/
    │   ├── AddVehicleActivity.java
    │   ├── UpdateVehicle.java
    │   ├── VehicleCardActivity.java
    │   └── VehicleDetailActivity.java
    └── ZaloPay/
        ├── Api/
        │   ├── CreateOrder.java
        │   └── HttpProvider.java
        ├── Constant/
        │   └── AppInfo.java
        ├── Helper/
        │   ├── HMac/
        │   │   ├── HMacUtil.java
        │   │   └── HexStringUtil.java
        │   └── Helpers.java
        └── ZPDK/
            └── zpdk-release-v3.1.aar
```

## FILE CONTENTS

### ActivityPages\CustomerMainActivity.java
```java
package com.uit.carrental.ActivityPages;

import android.os.Bundle;
import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import com.google.android.material.bottomnavigation.BottomNavigationView;
import com.uit.carrental.FragmentPages.Customer.CustomerActivityFragment;
import com.uit.carrental.FragmentPages.Customer.CustomerHomeFragment;
import com.uit.carrental.FragmentPages.Customer.CustomerNotificationFragment;
import com.uit.carrental.FragmentPages.Customer.CustomerSettingFragment;
import com.uit.carrental.R;
import com.uit.carrental.databinding.CustomerActivityMainBinding;

public class CustomerMainActivity extends AppCompatActivity {

    private CustomerActivityMainBinding binding;
    private static final String TAG_HOME = "home";
    private static final String TAG_ACTIVITY = "activity";
    private static final String TAG_NOTIFICATIONS = "notifications";
    private static final String TAG_SETTING = "setting";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = CustomerActivityMainBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        binding.bottomNavigationView.setBackground(null);
        binding.bottomNavigationView.setOnItemSelectedListener(item -> {
            String tag;
            Fragment fragment;
            int itemId = item.getItemId();

            if (itemId == R.id.home) {
                tag = TAG_HOME;
                fragment = getSupportFragmentManager().findFragmentByTag(TAG_HOME);
                if (fragment == null) fragment = new CustomerHomeFragment();
            } else if (itemId == R.id.activity) {
                tag = TAG_ACTIVITY;
                fragment = getSupportFragmentManager().findFragmentByTag(TAG_ACTIVITY);
                if (fragment == null) fragment = new CustomerActivityFragment();
            } else if (itemId == R.id.notifications) {
                tag = TAG_NOTIFICATIONS;
                fragment = getSupportFragmentManager().findFragmentByTag(TAG_NOTIFICATIONS);
                if (fragment == null) fragment = new CustomerNotificationFragment();
            } else if (itemId == R.id.setting) {
                tag = TAG_SETTING;
                fragment = getSupportFragmentManager().findFragmentByTag(TAG_SETTING);
                if (fragment == null) fragment = new CustomerSettingFragment();
            } else {
                return false;
            }

            showFragment(fragment, tag);
            return true;
        });

        // Load default fragment
        if (savedInstanceState == null) {
            showFragment(new CustomerHomeFragment(), TAG_HOME);
            binding.bottomNavigationView.setSelectedItemId(R.id.home);
        }
    }

    private void showFragment(Fragment fragment, String tag) {
        FragmentManager fragmentManager = getSupportFragmentManager();
        fragmentManager.beginTransaction()
                .replace(R.id.frame_layout_customer, fragment, tag)
                .addToBackStack(tag)
                .commit();
    }
}
```

### ActivityPages\OwnerMainActivity.java
```java
package com.uit.carrental.ActivityPages;

import android.os.Bundle;

import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import androidx.fragment.app.FragmentTransaction;

import com.uit.carrental.FragmentPages.Owner.OwnerActivityFragment;
import com.uit.carrental.FragmentPages.Owner.OwnerNotificationsFragment;
import com.uit.carrental.FragmentPages.Owner.OwnerSettingFragment;
import com.uit.carrental.FragmentPages.Owner.OwnerVehicleFragment;
import com.uit.carrental.R;
import com.uit.carrental.databinding.OwnerActivityMainBinding;

public class OwnerMainActivity extends AppCompatActivity {

    OwnerActivityMainBinding binding;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = OwnerActivityMainBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());
        if (getSupportActionBar() != null) {
            getSupportActionBar().hide();
        }
        replaceFragment(new OwnerVehicleFragment());
        binding.bottomNavigationView.setBackground(null);

        binding.bottomNavigationView.setOnItemSelectedListener(item -> {
            int itemId = item.getItemId();

            if (itemId == R.id.vehicle) {
                replaceFragment(new OwnerVehicleFragment());
            } else if (itemId == R.id.activity) {
                replaceFragment(new OwnerActivityFragment());
            } else if (itemId == R.id.notifications) {
                replaceFragment(new OwnerNotificationsFragment());
            } else if (itemId == R.id.setting) {
                replaceFragment(new OwnerSettingFragment());
            }

            return true;
        });

    }

    private void replaceFragment(Fragment fragment)
    {
        FragmentManager fragmentManager = getSupportFragmentManager();
        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
        fragmentTransaction.replace(R.id.frame_layout_owner, fragment);
        fragmentTransaction.commit();
    }
}
```

### ActivityPages\StartAppActivity.java
```java
package com.uit.carrental.ActivityPages;

import android.content.Intent;
import android.os.Bundle;

import androidx.appcompat.app.AppCompatActivity;
import androidx.viewpager2.widget.ViewPager2;

import com.uit.carrental.Adapter.SplashPagerAdapter;
import com.uit.carrental.FragmentPages.SplashFragment;
import com.uit.carrental.R;
import com.uit.carrental.Service.UserAuthentication.LoginActivity;

public class StartAppActivity extends AppCompatActivity implements SplashFragment.OnNextButtonClickListener {

    private ViewPager2 viewPager;
    private static final int TOTAL_SPLASHES = 4;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_splash);

        viewPager = findViewById(R.id.splash_viewpager);
        SplashPagerAdapter adapter = new SplashPagerAdapter(this);
        viewPager.setAdapter(adapter);

        viewPager.setPageTransformer((page, position) -> {
            page.setAlpha(1 - Math.abs(position));
            page.setTranslationX(-position * page.getWidth());
        });
    }

    @Override
    public void onNextButtonClicked(int position) {
        if (position < TOTAL_SPLASHES - 1) {
            viewPager.setCurrentItem(position + 1, true);
        } else {
            startActivity(new Intent(this, LoginActivity.class));
            overridePendingTransition(R.anim.anim_in_right, R.anim.anim_out_left);
            finish();
        }
    }
}
```

### Adapter\ActivityAdapter.java
```java
package com.uit.carrental.Adapter;


import android.content.Intent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.uit.carrental.FragmentPages.Customer.CustomerActivityFragment;
import com.uit.carrental.Model.Activity;
import com.uit.carrental.Model.User;
import com.uit.carrental.R;
import com.uit.carrental.Service.Activity.CustomerActivityDetail;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;

import java.util.ArrayList;

public class ActivityAdapter extends RecyclerView.Adapter<ActivityAdapter.MyViewHolder>{

    CustomerActivityFragment customerActivityFragment;
    Activity noti;
    ArrayList<Activity> mNoti;
    FirebaseFirestore dtb;
    String Name, ProvideID;
    public ActivityAdapter(CustomerActivityFragment mContext, ArrayList<Activity>mNoti){
        this.customerActivityFragment=mContext;
        this.mNoti=mNoti;
    }
    @NonNull
    @Override
    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View v = LayoutInflater.from(customerActivityFragment.getActivity()).inflate(R.layout.item_activity, parent, false);
        return new MyViewHolder(v);
    }
    @Override
    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {
        noti = mNoti.get(position);
        dtb = FirebaseFirestore.getInstance();
        ProvideID=noti.getProvider_id();
        getuser(ProvideID);
        holder.name.setText(Name);
        holder.id.setText(noti.getNoti_id());
        if(noti.getStatus().equals( "Dang cho"))
        {
            holder.status.setText("Nhà cung cấp chưa xác nhận");
        }
        else
        {
            if(noti.getStatus().equals( "Thanh toan"))
            {
                holder.status.setText("Đang chờ thanh toán");
            }
            else
            if (noti.getStatus().equals("Khong xac nhan"))
            {
                holder.status.setText("Nhà cung cấp không xác nhận");
            }
            else
            if (noti.getStatus().equals("Da thanh toan"))
            {
                holder.status.setText("Đã thanh toán");
            }
            else {
                holder.status.setText("Đã xác nhận");
            }

        }
        holder.itemView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent = new Intent(customerActivityFragment.getActivity(), CustomerActivityDetail.class);
                intent.putExtra("NotiID", noti.getNoti_id());
                customerActivityFragment.startActivity(intent);
            }
        });
    }

    @Override
    public int getItemCount() {
        return mNoti.size();
    }

    public static class MyViewHolder extends RecyclerView.ViewHolder {

        TextView name, status,id;

        public MyViewHolder(@NonNull View itemView) {
            super(itemView);
            name = itemView.findViewById(R.id.tv_noti_name);
            status=itemView.findViewById(R.id.tv_Status);
            id=itemView.findViewById(R.id.tv_noti_ID);
        }
    }

    private void getuser(String ProvideID){
        dtb.collection("Users")
                .whereEqualTo("user_id", ProvideID)
                .get()
                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<QuerySnapshot> task) {
                        if (task.isSuccessful()) {
                            for (QueryDocumentSnapshot document : task.getResult()) {

                                User user = new User();
                                user.setUser_id(document.get("user_id").toString());
                                user.setUsername(document.get("username").toString());
                                user.setEmail(document.get("email").toString());
                                user.setPhoneNumber(document.get("phoneNumber").toString());
                                Name=user.getUsername();
                            }
                        } else {

                        }
                    }
                });
    }




}

```

### Adapter\MessageAdapter.java
```java
package com.uit.carrental.Adapter;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import com.uit.carrental.Model.Message;
import com.uit.carrental.R;
import java.util.List;

public class MessageAdapter extends RecyclerView.Adapter<MessageAdapter.MessageViewHolder> {
    private List<Message> messages;

    public MessageAdapter(List<Message> messages) {
        this.messages = messages;
    }

    @NonNull
    @Override
    public MessageViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.message_item, parent, false);
        return new MessageViewHolder(view);
    }

    @Override
    public void onBindViewHolder(@NonNull MessageViewHolder holder, int position) {
        Message message = messages.get(position);
        holder.messageText.setText(message.getContent());

        ConstraintLayout.LayoutParams params = (ConstraintLayout.LayoutParams)
                holder.messageContainer.getLayoutParams();
        if (message.isUser()) {
            params.startToEnd = ConstraintLayout.LayoutParams.UNSET;
            params.endToEnd = ConstraintLayout.LayoutParams.PARENT_ID;
            params.setMarginEnd(8);
            holder.avatar.setVisibility(View.GONE);
            holder.messageContainer.setBackgroundResource(R.drawable.message_bubble_background_user);
        } else {
            params.startToEnd = holder.avatar.getId();
            params.endToEnd = ConstraintLayout.LayoutParams.UNSET;
            params.setMarginStart(8);
            holder.avatar.setVisibility(View.VISIBLE);
            holder.messageContainer.setBackgroundResource(R.drawable.message_bubble_background);
        }
        holder.messageContainer.setLayoutParams(params);
    }

    @Override
    public int getItemCount() {
        return messages.size();
    }

    static class MessageViewHolder extends RecyclerView.ViewHolder {
        ImageView avatar;
        LinearLayout messageContainer;
        TextView messageText;

        MessageViewHolder(@NonNull View itemView) {
            super(itemView);
            avatar = itemView.findViewById(R.id.avatar);
            messageContainer = itemView.findViewById(R.id.message_container);
            messageText = itemView.findViewById(R.id.message_text);
        }
    }
}
```

### Adapter\NotificationAdapter.java
```java
package com.uit.carrental.Adapter;

import android.content.Context;
import android.content.Intent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.uit.carrental.FragmentPages.Customer.CustomerNotificationFragment;
import com.uit.carrental.Model.Activity;
import com.uit.carrental.R;
import com.uit.carrental.Service.Activity.CustomerActivityDetail;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.firebase.firestore.FirebaseFirestore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NotificationAdapter extends RecyclerView.Adapter<NotificationAdapter.NotificationViewHolder> {
    private CustomerNotificationFragment customerNotificationFragment;
    //    private ArrayList<String> title, content;
    Activity noti;
    ArrayList<Activity> mNoti;
    FirebaseFirestore dtb;

    //    public NotificationAdapter(ArrayList<String> a, ArrayList<String> b) {
//        this.title = a;
//        this.content = b;
//    }
    public NotificationAdapter(CustomerNotificationFragment mContext, ArrayList<Activity> mNoti){
        this.customerNotificationFragment = mContext;
        this.mNoti=mNoti;
    }

    @NonNull
    @Override
    public NotificationViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View v = LayoutInflater.from(customerNotificationFragment.getActivity()).inflate(R.layout.item_notification, parent, false);
        return new NotificationViewHolder(v);
    }

    @Override
    public void onBindViewHolder(@NonNull NotificationViewHolder holder, int position) {
        noti = mNoti.get(position);

        if(noti.getStatus().equals( "Xac nhan"))
        {
            holder.status.setText("Nhà cung cấp đã xác nhận");
        }
        else
        {
//            if(noti.getStatus().equals( "Khong xac nhan"))
//            {
            holder.status.setText("Nhà cung cấp không xác nhận");
//            }

        }



    }

    @Override
    public int getItemCount() {
        return mNoti.size();
    }
    public  class  NotificationViewHolder extends RecyclerView.ViewHolder{
        TextView status;

        public NotificationViewHolder(@NonNull View itemView) {
            super(itemView);
            status=itemView.findViewById(R.id.tv_noti_text);

        }
    }


}

```

### Adapter\OwnerActivityAdapter.java
```java
package com.uit.carrental.Adapter;

import android.content.Intent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.uit.carrental.FragmentPages.Owner.OwnerActivityFragment;
import com.uit.carrental.Model.Activity;

import com.uit.carrental.Model.User;
import com.uit.carrental.R;
import com.uit.carrental.Service.Activity.OwnerActivityDetail;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;

import java.util.ArrayList;

public class OwnerActivityAdapter extends RecyclerView.Adapter<OwnerActivityAdapter.MyViewHolder>{
    OwnerActivityFragment ownerActivityFragment;
    Activity noti;
    ArrayList<Activity> mNoti;

    String CustomerID, Name;
    FirebaseFirestore dtb;

    public OwnerActivityAdapter(OwnerActivityFragment mContext, ArrayList<Activity>mNoti){
        this.ownerActivityFragment=mContext;
        this.mNoti=mNoti;

    }

    @NonNull
    @Override
    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View v = LayoutInflater.from(ownerActivityFragment.getActivity()).inflate(R.layout.item_activity, parent, false);
        return new MyViewHolder(v);
    }


    @Override
    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {

        noti = mNoti.get(position);
        dtb = FirebaseFirestore.getInstance();
        CustomerID=noti.getCustomer_id();
        getuser(CustomerID);
        holder.name.setText(Name);

        holder.id.setText(noti.getNoti_id());

        if(noti.getStatus().equals( "Dang cho"))
        {
            holder.status.setText("Nhà cung cấp chưa xác nhận");
        }
        else
        {
            if(noti.getStatus().equals( "Thanh toan"))
            {
                holder.status.setText("Đang chờ thanh toán");
            }
            else
            if (noti.getStatus().equals("Khong xac nhan"))
            {
                holder.status.setText("Nhà cung cấp không xác nhận");
            }
            else
            if (noti.getStatus().equals("Da thanh toan"))
            {
                holder.status.setText("Đã thanh toán");
            }
            else {
                holder.status.setText("Đã xác nhận");
            }

        }

        holder.itemView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent = new Intent(ownerActivityFragment.getActivity(), OwnerActivityDetail.class);
                intent.putExtra("NotiID", noti.getNoti_id());
                ownerActivityFragment.startActivity(intent);
            }
        });
    }

    @Override
    public int getItemCount() {
        return mNoti.size();
    }

    public static class MyViewHolder extends RecyclerView.ViewHolder {

        TextView name, status,id;

        public MyViewHolder(@NonNull View itemView) {
            super(itemView);
            name = itemView.findViewById(R.id.tv_noti_name);
            status=itemView.findViewById(R.id.tv_Status);
            id=itemView.findViewById(R.id.tv_noti_ID);


        }
    }
    private void getuser(String Customerid){
        dtb.collection("Users")
                .whereEqualTo("user_id",Customerid)
                .get()
                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<QuerySnapshot> task) {
                        if (task.isSuccessful()) {
                            for (QueryDocumentSnapshot document : task.getResult()) {

                                User user = new User();
                                user.setUser_id(document.get("user_id").toString());
                                user.setUsername(document.get("username").toString());

                                Name=user.getUsername();
                            }
                        } else {

                        }
                    }
                });
    }




}

```

### Adapter\OwnerNotificationAdapter.java
```java
package com.uit.carrental.Adapter;

import android.content.Intent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.uit.carrental.FragmentPages.Owner.OwnerNotificationsFragment;
import com.uit.carrental.Model.Activity;

import com.uit.carrental.R;
import com.uit.carrental.Service.Activity.OwnerActivityDetail;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.firebase.firestore.FirebaseFirestore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class OwnerNotificationAdapter extends RecyclerView.Adapter<OwnerNotificationAdapter.MyViewHolder>{
    //    OwnerActivityFragment ownerActivityFragment;
    OwnerNotificationsFragment ownerNotificationsFragment;
    Activity noti;
    ArrayList<Activity> mNoti;

    String CustomerID, Name;
    FirebaseFirestore dtb;



    public OwnerNotificationAdapter(OwnerNotificationsFragment mContext, ArrayList<Activity>mNoti){
        this.ownerNotificationsFragment=mContext;
        this.mNoti=mNoti;

    }

    @NonNull
    @Override
    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View v = LayoutInflater.from(ownerNotificationsFragment.getActivity()).inflate(R.layout.item_notification, parent, false);
        return new MyViewHolder(v);
    }

    @Override
    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {

        noti = mNoti.get(position);


        holder.status.setText("Bạn vừa nhận 1 yêu cầu");

    }

    @Override
    public int getItemCount() {
        return mNoti.size();
    }

    public static class MyViewHolder extends RecyclerView.ViewHolder {

        TextView  status;


        public MyViewHolder(@NonNull View itemView) {
            super(itemView);

            status=itemView.findViewById(R.id.tv_noti_text);




        }
    }





}

```

### Adapter\OwnerVehicleAdapter.java
```java
package com.uit.carrental.Adapter;

import android.content.Intent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.bumptech.glide.Glide;
import com.uit.carrental.FragmentPages.Owner.OwnerVehicleFragment;
import com.uit.carrental.Model.Vehicle;
import com.uit.carrental.Model.onClickInterface;
import com.uit.carrental.R;
import com.uit.carrental.Service.Vehicle.UpdateVehicle;

import java.util.ArrayList;

public class OwnerVehicleAdapter extends RecyclerView.Adapter<OwnerVehicleAdapter.MyViewHolder> {
    private final OwnerVehicleFragment ownerVehicleFragment;
    private final ArrayList<Vehicle> vehicles;
    private final onClickInterface onClickInterface;

    public OwnerVehicleAdapter(OwnerVehicleFragment context, ArrayList<Vehicle> vehicles, onClickInterface onClickInterface) {
        this.ownerVehicleFragment = context;
        this.vehicles = vehicles;
        this.onClickInterface = onClickInterface;
    }

    @NonNull
    @Override
    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View v = LayoutInflater.from(ownerVehicleFragment.getActivity()).inflate(R.layout.owner_vehicle_card, parent, false);
        return new MyViewHolder(v);
    }

    @Override
    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {
        final int pos = position;
        Vehicle vehicle = vehicles.get(position);

        // Mock data if null
        holder.name.setText(vehicle.getVehicle_name() != null ? vehicle.getVehicle_name() : "Xe mẫu");
        holder.price.setText(vehicle.getVehicle_price() != null ? vehicle.getVehicle_price() : "500.000VNĐ/Ngày");
        holder.provider.setText(vehicle.getProvider_name() != null ? vehicle.getProvider_name() : "Nhà cung cấp mẫu");
        holder.rating.setText(vehicle.getVehicle_rating() != null ? vehicle.getVehicle_rating() : "4.0 (0 Đánh giá)");

        // Load image with Glide
        if (vehicle.getVehicle_imageURL() != null && !vehicle.getVehicle_imageURL().isEmpty()) {
            Glide.with(ownerVehicleFragment.getActivity())
                    .load(vehicle.getVehicle_imageURL())
                    .into(holder.vehicleImage);
        } else {
            holder.vehicleImage.setImageResource(R.drawable.a2_0_1); // Mock image
        }

        holder.itemView.setOnClickListener(v -> {
            onClickInterface.setClick(pos);
            Vehicle clickedVehicle = vehicles.get(pos);
            Intent intent = new Intent(ownerVehicleFragment.getActivity(), UpdateVehicle.class);
            intent.putExtra("vehicle_id", clickedVehicle.getVehicle_id());
            ownerVehicleFragment.startActivity(intent);
        });
    }

    @Override
    public int getItemCount() {
        return vehicles.size();
    }

    public static class MyViewHolder extends RecyclerView.ViewHolder {
        TextView name, price, provider, rating;
        ImageView vehicleImage;

        public MyViewHolder(@NonNull View itemView) {
            super(itemView);
            name = itemView.findViewById(R.id.vehicle_name);
            price = itemView.findViewById(R.id.tv_vehicle_price);
            provider = itemView.findViewById(R.id.provider_name);
            rating = itemView.findViewById(R.id.vehicle_rating);
            vehicleImage = itemView.findViewById(R.id.img_vehicle);
        }
    }
}
```

### Adapter\SplashPagerAdapter.java
```java
package com.uit.carrental.Adapter;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentActivity;
import androidx.viewpager2.adapter.FragmentStateAdapter;

import com.uit.carrental.FragmentPages.SplashFragment;
import com.uit.carrental.R;

public class SplashPagerAdapter extends FragmentStateAdapter {

    private final int[] splashLayouts = {
            R.layout.sflash_1,
            R.layout.sflash_2,
            R.layout.sflash_3,
            R.layout.sflash_4
    };

    public SplashPagerAdapter(@NonNull FragmentActivity fragmentActivity) {
        super(fragmentActivity);
    }

    @NonNull
    @Override
    public Fragment createFragment(int position) {
        return SplashFragment.newInstance(splashLayouts[position], position);
    }

    @Override
    public int getItemCount() {
        return splashLayouts.length;
    }
}
```

### Adapter\VehicleAdapter.java
```java
package com.uit.carrental.Adapter;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.bumptech.glide.Glide;
import com.uit.carrental.FragmentPages.Customer.CustomerHomeFragment;
import com.uit.carrental.Model.Vehicle;
import com.uit.carrental.Model.onClickInterface;
import com.uit.carrental.R;

import java.util.ArrayList;

public class VehicleAdapter extends RecyclerView.Adapter<VehicleAdapter.MyViewHolder> {
    private final CustomerHomeFragment customerHomeFragment;
    private final ArrayList<Vehicle> vehicles;
    private final onClickInterface onClickInterface;

    public VehicleAdapter(CustomerHomeFragment context, ArrayList<Vehicle> vehicles, onClickInterface onClickInterface) {
        this.customerHomeFragment = context;
        this.vehicles = vehicles;
        this.onClickInterface = onClickInterface;
    }

    @NonNull
    @Override
    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View v = LayoutInflater.from(customerHomeFragment.getActivity()).inflate(R.layout.vehicle_card, parent, false);
        return new MyViewHolder(v);
    }

    @Override
    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {
        Vehicle vehicle = vehicles.get(position);
        holder.name.setText(vehicle.getVehicle_name());
        holder.price.setText(vehicle.getVehicle_price());
        holder.rating.setText(vehicle.getVehicle_rating() != null ? vehicle.getVehicle_rating() : "4.0 (0 Đánh giá)");
        Glide.with(customerHomeFragment.getView()).load(vehicle.getVehicle_imageURL()).into(holder.vehicleImage);
        holder.itemView.setOnClickListener(v -> onClickInterface.setClick(position));
    }

    @Override
    public int getItemCount() {
        return vehicles.size();
    }

    public static class MyViewHolder extends RecyclerView.ViewHolder {
        TextView name, price, rating;
        ImageView vehicleImage;

        public MyViewHolder(@NonNull View itemView) {
            super(itemView);
            name = itemView.findViewById(R.id.vehicle_name);
            price = itemView.findViewById(R.id.tv_vehicle_price);
            rating = itemView.findViewById(R.id.vehicle_rating);
            vehicleImage = itemView.findViewById(R.id.img_vehicle);
        }
    }
}
```

### Adapter\ViewPagerAdapter.java
```java
package com.uit.carrental.Adapter;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentActivity;
import androidx.viewpager2.adapter.FragmentStateAdapter;
import com.uit.carrental.FragmentPages.Customer.ChatFragment;
import com.uit.carrental.FragmentPages.Customer.CustomerHomeFragment;

public class ViewPagerAdapter extends FragmentStateAdapter {
    public ViewPagerAdapter(@NonNull FragmentActivity fragmentActivity) {
        super(fragmentActivity);
    }

    @NonNull
    @Override
    public Fragment createFragment(int position) {
        switch (position) {
            case 0:
                return new CustomerHomeFragment();
            case 1:
                return new ChatFragment();
            default:
                return new CustomerHomeFragment();
        }
    }

    @Override
    public int getItemCount() {
        return 2; // Two tabs: Home and Chat
    }
}
```

### FragmentPages\SplashFragment.java
```java
package com.uit.carrental.FragmentPages;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;

import com.uit.carrental.R;

public class SplashFragment extends Fragment {

    private static final String ARG_LAYOUT = "layout";
    private static final String ARG_POSITION = "position";
    private OnNextButtonClickListener listener;

    public interface OnNextButtonClickListener {
        void onNextButtonClicked(int position);
    }

    public static SplashFragment newInstance(int layoutResId, int position) {
        SplashFragment fragment = new SplashFragment();
        Bundle args = new Bundle();
        args.putInt(ARG_LAYOUT, layoutResId);
        args.putInt(ARG_POSITION, position);
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (getActivity() instanceof OnNextButtonClickListener) {
            listener = (OnNextButtonClickListener) getActivity();
        }
    }

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        int layoutResId = getArguments() != null ? getArguments().getInt(ARG_LAYOUT) : R.layout.sflash_1;
        View view = inflater.inflate(layoutResId, container, false);

        Button nextButton = view.findViewById(R.id.next_button);
        int position = getArguments() != null ? getArguments().getInt(ARG_POSITION) : 0;
        nextButton.setOnClickListener(v -> {
            if (listener != null) {
                listener.onNextButtonClicked(position);
            }
        });

        return view;
    }
}
```

### FragmentPages\Customer\ChatFragment.java
```java
package com.uit.carrental.FragmentPages.Customer;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import com.uit.carrental.Adapter.MessageAdapter;
import com.uit.carrental.Model.Message;
import com.uit.carrental.R;
import java.util.ArrayList;
import java.util.List;

public class ChatFragment extends Fragment {
    private RecyclerView chatRecyclerView;
    private EditText messageInput;
    private ImageView sendButton;
    private MessageAdapter messageAdapter;
    private List<Message> messages;
    private LinearLayout draggableChatContainer;
    private float dX, dY;
    private int lastAction;

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,
                             @Nullable Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_chat, container, false);

        // Initialize views
        chatRecyclerView = view.findViewById(R.id.chat_recycler_view);
        messageInput = view.findViewById(R.id.message_input);
        sendButton = view.findViewById(R.id.send_button);
        draggableChatContainer = view.findViewById(R.id.draggable_chat_container);

        // Setup RecyclerView
        messages = new ArrayList<>();
        messages.add(new Message("Tui mún đi bỉn thì thuê xe gì chụp ảnh đẹp", true));
        messages.add(new Message("Bạn đi xe container nha", false));
        messages.add(new Message("...", false));
        messages.add(new Message("Thuê xe đó chở cả lò đi lun hả má =))))", true));
        messageAdapter = new MessageAdapter(messages);
        LinearLayoutManager layoutManager = new LinearLayoutManager(getContext());
        layoutManager.setStackFromEnd(true);
        chatRecyclerView.setLayoutManager(layoutManager);
        chatRecyclerView.setAdapter(messageAdapter);

        // Send button click
        sendButton.setOnClickListener(v -> {
            String text = messageInput.getText().toString().trim();
            if (!text.isEmpty()) {
                messages.add(new Message(text, true));
                messageAdapter.notifyItemInserted(messages.size() - 1);
                chatRecyclerView.scrollToPosition(messages.size() - 1);
                messageInput.setText("");
                if (text.toLowerCase().contains("thuê xe")) {
                    messages.add(new Message("Bạn muốn thuê xe gì? Sedan, SUV hay xe tải?", false));
                } else {
                    messages.add(new Message("Dạ, bạn nói rõ hơn được không ạ?", false));
                }
                messageAdapter.notifyItemInserted(messages.size() - 1);
                chatRecyclerView.scrollToPosition(messages.size() - 1);
            }
        });

        // Make chat container draggable
        draggableChatContainer.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent event) {
                switch (event.getActionMasked()) {
                    case MotionEvent.ACTION_DOWN:
                        dX = view.getX() - event.getRawX();
                        dY = view.getY() - event.getRawY();
                        lastAction = MotionEvent.ACTION_DOWN;
                        return true;

                    case MotionEvent.ACTION_MOVE:
                        view.setY(event.getRawY() + dY);
                        view.setX(event.getRawX() + dX);
                        lastAction = MotionEvent.ACTION_MOVE;
                        return true;

                    case MotionEvent.ACTION_UP:
                        if (lastAction == MotionEvent.ACTION_DOWN) {
                            // Handle click if needed
                        }
                        return true;

                    default:
                        return false;
                }
            }
        });

        return view;
    }
}
```

### FragmentPages\Customer\CustomerActivityFragment.java
```java
package com.uit.carrental.FragmentPages.Customer;

import android.app.ProgressDialog;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.uit.carrental.Adapter.ActivityAdapter;
import com.uit.carrental.Model.Activity;
import com.uit.carrental.R;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageReference;

import java.util.ArrayList;


public class CustomerActivityFragment extends Fragment {

    RecyclerView recyclerView;
    ActivityAdapter notificationAdapter;
    ArrayList<Activity> activities;
    FirebaseFirestore dtb_noti;
    ProgressDialog progressDialog;
    String current_user_id;
    StorageReference storageReference;
    FirebaseAuth firebaseAuth;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {

        View view = inflater.inflate(R.layout.customer_fragment_activity, container, false);
        recyclerView = view.findViewById(R.id.activity_list);
        recyclerView.setHasFixedSize(true);
        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));

        progressDialog = new ProgressDialog(getActivity());
        progressDialog.setCancelable(false);
        progressDialog.setMessage("Đang lấy dữ liệu...");
        progressDialog.show();

        storageReference = FirebaseStorage.getInstance().getReference();
        dtb_noti = FirebaseFirestore.getInstance();
        firebaseAuth = FirebaseAuth.getInstance();
        current_user_id = firebaseAuth.getCurrentUser().getUid();

        activities = new ArrayList<Activity>();
        notificationAdapter = new ActivityAdapter(CustomerActivityFragment.this, activities);
        recyclerView.setAdapter(notificationAdapter);

        EventChangeListener();
        progressDialog.cancel();
        return view;
    }
    private void EventChangeListener()
    {
        dtb_noti.collection("Notification")
                .whereEqualTo("customer_id", current_user_id)
                .get()
                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<QuerySnapshot> task) {
                        if (task.isSuccessful()) {
                            for (QueryDocumentSnapshot document : task.getResult()) {
                                Activity temp = new Activity();
                                temp.setNoti_id(document.get("noti_id").toString());
                                temp.setProvider_id(document.get("provider_id").toString());
                                temp.setCustomer_id(document.get("customer_id").toString());
                                temp.setStatus(document.get("status").toString());
                                temp.setVehicle_id(document.get("vehicle_id").toString());
                                activities.add(temp);
                                notificationAdapter.notifyDataSetChanged();
                            }
                        } else {
                            Toast.makeText(getContext(), "Không thể lấy thông tin đơn hàng ", Toast.LENGTH_SHORT).show();
                        }
                    }
                });
    }
}
```

### FragmentPages\Customer\CustomerHomeFragment.java
```java
package com.uit.carrental.FragmentPages.Customer;

import android.app.ProgressDialog;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.bumptech.glide.Glide;
import com.uit.carrental.Adapter.VehicleAdapter;
import com.uit.carrental.Model.Vehicle;
import com.uit.carrental.Model.onClickInterface;
import com.uit.carrental.R;
import com.uit.carrental.Service.Vehicle.VehicleDetailActivity;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.Query;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;

import java.util.ArrayList;
import java.util.List;

public class CustomerHomeFragment extends Fragment {

    private RecyclerView brandsList, vehicleList;
    private EditText searchInput;
    private TextView locationText;
    private ImageView avatarImage;
    private ArrayList<Vehicle> vehicles;
    private VehicleAdapter vehicleAdapter;
    private BrandAdapter brandAdapter;
    private FirebaseFirestore dtbVehicle;
    private ProgressDialog progressDialog;
    private onClickInterface clickInterface;
    private View mView;

    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,
                             @Nullable Bundle savedInstanceState) {
        mView = inflater.inflate(R.layout.customer_fragment_home, container, false);

        // Initialize views
        brandsList = mView.findViewById(R.id.brands_list);
        vehicleList = mView.findViewById(R.id.vehicle_list);
        searchInput = mView.findViewById(R.id.search_input);
        locationText = mView.findViewById(R.id.location_text);
        avatarImage = mView.findViewById(R.id.avatar_image);

        // Initialize Firebase and ProgressDialog
        dtbVehicle = FirebaseFirestore.getInstance();
        progressDialog = new ProgressDialog(getActivity());
        progressDialog.setCancelable(false);
        progressDialog.setMessage("Đang lấy dữ liệu...");

        // Setup click interface for vehicles
        clickInterface = position -> {
            Vehicle clickedVehicle = vehicles.get(position);
            Intent intent = new Intent(getContext(), VehicleDetailActivity.class);
            intent.putExtra("vehicle_id", clickedVehicle.getVehicle_id());
            startActivity(intent);
        };

        // Setup RecyclerViews
        setupBrandsRecyclerView();
        setupVehiclesRecyclerView();

        // Load vehicle data from Firestore
        try {
            EventChangeListener();
        } catch (Exception e) {
            Toast.makeText(getContext(), "Lỗi: " + e.getMessage(), Toast.LENGTH_LONG).show();
        }

        return mView;
    }

    private void setupBrandsRecyclerView() {
        brandsList.setLayoutManager(new LinearLayoutManager(getContext(), LinearLayoutManager.HORIZONTAL, false));
        List<Brand> brands = new ArrayList<>();
        brands.add(new Brand("BMW", R.drawable.bmw_svg));
        brands.add(new Brand("Vinfast", R.drawable.images_1__main));
        brands.add(new Brand("Mercedes", R.drawable.images_2__main));
        brands.add(new Brand("Honda", R.drawable.images_3__main));
        brandAdapter = new BrandAdapter(brands);
        brandsList.setAdapter(brandAdapter);
    }

    private void setupVehiclesRecyclerView() {
        vehicleList.setLayoutManager(new LinearLayoutManager(getContext()));
        vehicles = new ArrayList<>();
        vehicleAdapter = new VehicleAdapter(CustomerHomeFragment.this, vehicles, clickInterface);
        vehicleList.setAdapter(vehicleAdapter);
    }

    private void EventChangeListener() {
        progressDialog.show();
        dtbVehicle.collection("Vehicles")
                .orderBy("vehicle_name", Query.Direction.ASCENDING)
                .get()
                .addOnCompleteListener(task -> {
                    progressDialog.dismiss();
                    if (task.isSuccessful()) {
                        for (QueryDocumentSnapshot document : task.getResult()) {
                            Vehicle temp = new Vehicle();
                            temp.setVehicle_id(document.getId());
                            temp.setVehicle_name(document.getString("vehicle_name"));
                            temp.setVehicle_price(document.getString("vehicle_price"));
                            temp.setVehicle_imageURL(document.getString("vehicle_imageURL"));
                            temp.setProvider_name(document.getString("provider_name"));
                            // Fake rating 4 sao nếu null
                            temp.setVehicle_rating(document.getString("vehicle_rating") != null ?
                                    document.getString("vehicle_rating") : "4.0 (0 Đánh giá)");
                            vehicles.add(temp);
                            vehicleAdapter.notifyDataSetChanged();
                        }
                    } else {
                        Toast.makeText(getContext(), "Không thể lấy thông tin xe", Toast.LENGTH_SHORT).show();
                    }
                });
    }

    private void LoadImage(String docId, ImageView imageView) {
        if (docId == null) {
            Log.e("LoadImage", "docId is null");
            return;
        }
        DocumentReference imageRef = FirebaseFirestore.getInstance().collection("Image").document(docId);
        imageRef.get().addOnSuccessListener(documentSnapshot -> {
            if (documentSnapshot.exists()) {
                String imageUrl = documentSnapshot.getString("Image");
                if (imageUrl != null) {
                    Glide.with(mView).load(imageUrl).into(imageView);
                }
            }
        }).addOnFailureListener(e -> Log.e("LoadImage", "Error: " + e.getMessage()));
    }

    // Brand model class
    private static class Brand {
        String name;
        int imageResId;

        Brand(String name, int imageResId) {
            this.name = name;
            this.imageResId = imageResId;
        }
    }

    // Brand Adapter
    private static class BrandAdapter extends RecyclerView.Adapter<BrandAdapter.ViewHolder> {
        private final List<Brand> brands;

        BrandAdapter(List<Brand> brands) {
            this.brands = brands;
        }

        @NonNull
        @Override
        public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
            View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_brand, parent, false);
            return new ViewHolder(view);
        }

        @Override
        public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
            Brand brand = brands.get(position);
            holder.brandImage.setImageResource(brand.imageResId);
            holder.brandName.setText(brand.name);
        }

        @Override
        public int getItemCount() {
            return brands.size();
        }

        static class ViewHolder extends RecyclerView.ViewHolder {
            ImageView brandImage;
            TextView brandName;

            ViewHolder(View itemView) {
                super(itemView);
                brandImage = itemView.findViewById(R.id.brand_image);
                brandName = itemView.findViewById(R.id.brand_name);
            }
        }
    }
}
```

### FragmentPages\Customer\CustomerNotificationFragment.java
```java
package com.uit.carrental.FragmentPages.Customer;

import android.app.ProgressDialog;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import android.widget.Toast;


import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.uit.carrental.Adapter.NotificationAdapter;
import com.uit.carrental.Model.Activity;
import com.uit.carrental.R;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageReference;
import com.mobsandgeeks.saripaar.adapter.TextViewStringAdapter;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import kotlin.collections.ArrayDeque;


public class CustomerNotificationFragment extends Fragment {
    RecyclerView recyclerView;
    NotificationAdapter notificationAdapter;
    ArrayList<Activity> notifications;
    FirebaseFirestore dtb_noti;
    ProgressDialog progressDialog;
    String current_user_id;
    StorageReference storageReference;
    FirebaseAuth firebaseAuth;
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.customer_fragment_notification, container, false);
        recyclerView = view.findViewById(R.id.frame_layout_noti);
        recyclerView.setHasFixedSize(true);
        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));

        storageReference = FirebaseStorage.getInstance().getReference();
        dtb_noti = FirebaseFirestore.getInstance();
        firebaseAuth = FirebaseAuth.getInstance();
        current_user_id = firebaseAuth.getCurrentUser().getUid();

        notifications = new ArrayList<Activity>();
        notificationAdapter = new NotificationAdapter(CustomerNotificationFragment.this,notifications);
        recyclerView.setAdapter(notificationAdapter);

        EventChangeListener();
        return view;
    }

    private void EventChangeListener()
    {

        dtb_noti.collection("Notification")
                .whereEqualTo("customer_id", current_user_id)
//                .whereNotEqualTo("status","Dang cho")
//                .whereEqualTo("status","Xac nhan")
//                .whereEqualTo("status","Khong xac nhan")
                .whereIn("status", Arrays.asList("Xac nhan","Khong xac nhan"))
                .get()
                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<QuerySnapshot> task) {
                        if (task.isSuccessful()) {
                            for (QueryDocumentSnapshot document : task.getResult()) {
                                Activity temp = new Activity();
                                temp.setNoti_id(document.get("noti_id").toString());
                                temp.setProvider_id(document.get("provider_id").toString());
                                temp.setCustomer_id(document.get("customer_id").toString());
                                temp.setStatus(document.get("status").toString());
                                temp.setVehicle_id(document.get("vehicle_id").toString());
                                notifications.add(temp);
                                notificationAdapter.notifyDataSetChanged();
                            }
                        } else {
                            Toast.makeText(getContext(), "Không thể lấy thông tin đơn hàng ", Toast.LENGTH_SHORT).show();
                        }
                    }
                });

    }

}
```

### FragmentPages\Customer\CustomerSettingFragment.java
```java
package com.uit.carrental.FragmentPages.Customer;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;

import com.uit.carrental.ActivityPages.OwnerMainActivity;
import com.uit.carrental.Model.User;
import com.uit.carrental.R;
import com.uit.carrental.Service.UserAuthentication.LoginActivity;
import com.uit.carrental.Service.UserAuthentication.UpdatePassword;
import com.uit.carrental.Service.UserAuthentication.UserProfile;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;
import com.squareup.picasso.Picasso;

import de.hdodenhof.circleimageview.CircleImageView;

public class CustomerSettingFragment extends Fragment {

    private TextView tvName;
    private CircleImageView imgAvatar;
    private TextView tvEdit;
    private ImageView editIcon;

    private FirebaseFirestore dtb_user;
    private FirebaseUser firebaseUser;
    private User user = new User();

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.customer_fragment_setting, container, false);

        // Initialize views
        imgAvatar = view.findViewById(R.id.img_avatar);
        tvName = view.findViewById(R.id.tv_name);
        tvEdit = view.findViewById(R.id.tv_edit);
        editIcon = view.findViewById(R.id.edit_icon);

        // Initialize setting items
        View layoutInformation = view.findViewById(R.id.layout_information);
        View layoutConnect = view.findViewById(R.id.layout_connect);
        View layoutChangePassword = view.findViewById(R.id.layout_change_password);
        View layoutDeleteAccount = view.findViewById(R.id.layout_delete_account);
        View layoutSettings = view.findViewById(R.id.layout_settings);
        View layoutSignOut = view.findViewById(R.id.layout_sign_out);

        // Set icons and texts for setting items
        setupSettingItem(layoutInformation, R.drawable.vector20_settings, "Thông tin tài khoản");
        setupSettingItem(layoutConnect, R.drawable.vector17_settings, "Giao diện nhà cung cấp");
        setupSettingItem(layoutChangePassword, R.drawable.vector8_settings, "Thay đổi mật khẩu");
        setupSettingItemWithOverlay(layoutDeleteAccount, R.drawable.vector11_settings, R.drawable.vector10_settings, "Yêu cầu xóa tài khoản");
        setupSettingItem(layoutSettings, R.drawable.vector13_settings, "Cài đặt");

        dtb_user = FirebaseFirestore.getInstance();
        firebaseUser = FirebaseAuth.getInstance().getCurrentUser();
        user.setUser_id(firebaseUser.getUid());

        // Load user data
        dtb_user.collection("Users")
                .whereEqualTo("user_id", user.getUser_id())
                .get()
                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<QuerySnapshot> task) {
                        if (task.isSuccessful()) {
                            for (QueryDocumentSnapshot document : task.getResult()) {
                                tvName.setText(document.get("username").toString());
                                user.setAvatarURL(document.get("avatarURL").toString());
                                if (!document.get("avatarURL").toString().isEmpty()) {
                                    Picasso.get().load(user.getAvatarURL()).into(imgAvatar);
                                } else {
                                    user.setAvatarURL("");
                                }
                            }
                        } else {
                            Toast.makeText(view.getContext(), "Không thể lấy thông tin", Toast.LENGTH_LONG).show();
                        }
                    }
                });

        // Click listeners
        tvEdit.setOnClickListener(v -> {
            Intent i = new Intent(getActivity(), UserProfile.class);
            startActivity(i);
            requireActivity().overridePendingTransition(0, 0);
        });

        editIcon.setOnClickListener(v -> {
            Intent i = new Intent(getActivity(), UserProfile.class);
            startActivity(i);
            requireActivity().overridePendingTransition(0, 0);
        });

        layoutInformation.setOnClickListener(v -> {
            Intent i = new Intent(getActivity(), UserProfile.class);
            startActivity(i);
            requireActivity().overridePendingTransition(0, 0);
        });

        layoutConnect.setOnClickListener(v -> {
            FirebaseUser firebaseUser = FirebaseAuth.getInstance().getCurrentUser();
            if (firebaseUser == null) return;

            FirebaseFirestore db = FirebaseFirestore.getInstance();
            db.collection("Users").document(firebaseUser.getUid())
                    .update("currentRole", "owner")
                    .addOnSuccessListener(aVoid -> {
                        Toast.makeText(getContext(), "Đã chuyển sang giao diện chủ xe!", Toast.LENGTH_SHORT).show();
                        Intent intent = new Intent(getActivity(), OwnerMainActivity.class);
                        startActivity(intent);
                        requireActivity().finish();
                    })
                    .addOnFailureListener(e -> {
                        Toast.makeText(getContext(), "Chuyển vai trò thất bại.", Toast.LENGTH_SHORT).show();
                    });
        });

        layoutChangePassword.setOnClickListener(v -> {
            Intent i = new Intent(getActivity(), UpdatePassword.class);
            startActivity(i);
            requireActivity().overridePendingTransition(0, 0);
        });

        layoutDeleteAccount.setOnClickListener(v -> {
            FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();
            if (user != null) {
                user.delete()
                        .addOnCompleteListener(new OnCompleteListener<Void>() {
                            @Override
                            public void onComplete(@NonNull Task<Void> task) {
                                if (task.isSuccessful()) {
                                    Toast.makeText(view.getContext(), "User account deleted.", Toast.LENGTH_LONG).show();
                                    Intent intent = new Intent(getActivity(), LoginActivity.class);
                                    startActivity(intent);
                                    requireActivity().overridePendingTransition(0, 0);
                                } else {
                                    Toast.makeText(view.getContext(), "Failed to delete user account.", Toast.LENGTH_LONG).show();
                                }
                            }
                        });
            }
        });

        layoutSettings.setOnClickListener(v -> {
            // TODO: Thêm hành động cho mục "Cài đặt" (ví dụ: mở SettingsActivity)
            Toast.makeText(getContext(), "Chức năng Cài đặt chưa được triển khai", Toast.LENGTH_SHORT).show();
        });

        layoutSignOut.setOnClickListener(v -> {
            FirebaseAuth.getInstance().signOut();
            Intent intent = new Intent(getActivity(), LoginActivity.class);
            startActivity(intent);
            requireActivity().overridePendingTransition(0, 0);
        });

        return view;
    }

    private void setupSettingItem(View view, int iconResId, String text) {
        ImageView icon = view.findViewById(R.id.setting_icon);
        TextView textView = view.findViewById(R.id.setting_text);
        icon.setImageResource(iconResId);
        textView.setText(text);
    }

    private void setupSettingItemWithOverlay(View view, int primaryIconResId, int overlayIconResId, String text) {
        // Kiểm tra khả năng đè vector10_settings lên vector11_settings
        // Vì item_setting_row.xml chỉ có 1 ImageView, dùng primaryIconResId (vector11_settings)
        // Nếu cần overlay, cần sửa item_setting_row.xml để thêm ImageView thứ hai
        ImageView icon = view.findViewById(R.id.setting_icon);
        TextView textView = view.findViewById(R.id.setting_text);
        icon.setImageResource(primaryIconResId); // Chỉ dùng vector11_settings để tránh xung đột
        textView.setText(text);
    }
}
```

### FragmentPages\Owner\OwnerActivityFragment.java
```java
package com.uit.carrental.FragmentPages.Owner;

import android.app.ProgressDialog;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import com.uit.carrental.Adapter.OwnerActivityAdapter;
import com.uit.carrental.Model.Activity;
import com.uit.carrental.R;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageReference;

import java.util.ArrayList;

public class OwnerActivityFragment extends Fragment {

    RecyclerView recyclerView;
    OwnerActivityAdapter ownerActivityAdapter;
    ArrayList<Activity> activities;
    FirebaseFirestore dtb_noti;
    ProgressDialog progressDialog;
    String current_user_id;
    StorageReference storageReference;
    FirebaseAuth firebaseAuth;
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View view = inflater.inflate(R.layout.customer_fragment_activity, container, false);
        recyclerView = view.findViewById(R.id.activity_list);
        recyclerView.setHasFixedSize(true);
        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));

        progressDialog = new ProgressDialog(getActivity());
        progressDialog.setCancelable(false);
        progressDialog.setMessage("Đang lấy dữ liệu...");
        progressDialog.show();

        storageReference = FirebaseStorage.getInstance().getReference();
        dtb_noti = FirebaseFirestore.getInstance();
        firebaseAuth = FirebaseAuth.getInstance();
        current_user_id = firebaseAuth.getCurrentUser().getUid();

        activities = new ArrayList<Activity>();
        ownerActivityAdapter = new OwnerActivityAdapter(OwnerActivityFragment.this, activities);
        recyclerView.setAdapter(ownerActivityAdapter);

        EventChangeListener();

        progressDialog.dismiss();
        return view;
    }
    private void EventChangeListener()
    {

        dtb_noti.collection("Notification")
                .whereEqualTo("provider_id", current_user_id)
                .get()
                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<QuerySnapshot> task) {
                        if (task.isSuccessful()) {
                            for (QueryDocumentSnapshot document : task.getResult()) {
                                Activity temp = new Activity();
                                temp.setNoti_id(document.get("noti_id").toString());
                                temp.setProvider_id(document.get("provider_id").toString());
                                temp.setCustomer_id(document.get("customer_id").toString());
                                temp.setStatus(document.get("status").toString());
                                temp.setVehicle_id(document.get("vehicle_id").toString());
                                activities.add(temp);
                                ownerActivityAdapter.notifyDataSetChanged();
                            }
                        } else {
                            Toast.makeText(getContext(), "Không thể lấy thông tin đơn hàng ", Toast.LENGTH_SHORT).show();
                        }
                    }
                });

    }
}
```

### FragmentPages\Owner\OwnerNotificationsFragment.java
```java
package com.uit.carrental.FragmentPages.Owner;

import android.app.ProgressDialog;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import com.uit.carrental.Adapter.NotificationAdapter;
import com.uit.carrental.Adapter.OwnerNotificationAdapter;
import com.uit.carrental.FragmentPages.Customer.CustomerNotificationFragment;
import com.uit.carrental.Model.Activity;
import com.uit.carrental.R;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageReference;

import java.util.ArrayList;
import java.util.Arrays;

public class OwnerNotificationsFragment extends Fragment {
    RecyclerView recyclerView;
    //    NotificationAdapter notificationAdapter;
    OwnerNotificationAdapter ownerNotificationAdapter;
    ArrayList<Activity> notifications;
    FirebaseFirestore dtb_noti;
    ProgressDialog progressDialog;
    String current_user_id;
    StorageReference storageReference;
    FirebaseAuth firebaseAuth;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View view = inflater.inflate(R.layout.customer_fragment_notification, container, false);
        recyclerView = view.findViewById(R.id.frame_layout_noti);
        recyclerView.setHasFixedSize(true);
        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));

        storageReference = FirebaseStorage.getInstance().getReference();
        dtb_noti = FirebaseFirestore.getInstance();
        firebaseAuth = FirebaseAuth.getInstance();
        current_user_id = firebaseAuth.getCurrentUser().getUid();

        notifications = new ArrayList<Activity>();
        ownerNotificationAdapter = new OwnerNotificationAdapter(OwnerNotificationsFragment.this,notifications);
        recyclerView.setAdapter(ownerNotificationAdapter);

        EventChangeListener();
        return view;
    }
    private void EventChangeListener()
    {

        dtb_noti.collection("Notification")
                .whereEqualTo("provider_id", current_user_id)
                .get()
                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<QuerySnapshot> task) {
                        if (task.isSuccessful()) {
                            for (QueryDocumentSnapshot document : task.getResult()) {
                                Activity temp = new Activity();
                                temp.setNoti_id(document.get("noti_id").toString());
                                temp.setProvider_id(document.get("provider_id").toString());
                                temp.setCustomer_id(document.get("customer_id").toString());
                                temp.setStatus(document.get("status").toString());
                                temp.setVehicle_id(document.get("vehicle_id").toString());

                                notifications.add(temp);
                                ownerNotificationAdapter.notifyDataSetChanged();
                            }
                        } else {
                            Toast.makeText(getContext(), "Không thể lấy thông tin đơn hàng ", Toast.LENGTH_SHORT).show();
                        }
                    }
                });

    }
}
```

### FragmentPages\Owner\OwnerSettingFragment.java
```java
package com.uit.carrental.FragmentPages.Owner;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.firestore.FirebaseFirestore;
import com.squareup.picasso.Picasso;
import com.uit.carrental.ActivityPages.CustomerMainActivity;
import com.uit.carrental.Model.User;
import com.uit.carrental.R;
import com.uit.carrental.Service.UserAuthentication.ForgotPasswordActivity;
import com.uit.carrental.Service.UserAuthentication.LoginActivity;
import com.uit.carrental.Service.UserAuthentication.ProfileManagement;

import de.hdodenhof.circleimageview.CircleImageView;

public class OwnerSettingFragment extends Fragment {

    private TextView tvName;
    private CircleImageView imgAvatar;
    private TextView tvEdit;
    private ImageView editIcon;

    private FirebaseFirestore dtb_user;
    private FirebaseUser firebaseUser;
    private FirebaseAuth mAuth;
    private User user = new User();

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.owner_fragment_setting, container, false);

        // Initialize views
        imgAvatar = view.findViewById(R.id.img_avatar);
        tvName = view.findViewById(R.id.tv_name);
        tvEdit = view.findViewById(R.id.tv_edit);
        editIcon = view.findViewById(R.id.edit_icon);

        // Initialize setting items
        View layoutInformation = view.findViewById(R.id.layout_information);
        View layoutSwitchToCustomer = view.findViewById(R.id.layout_switch_to_customer);
        View layoutChangePassword = view.findViewById(R.id.layout_change_password);
        View layoutDeleteAccount = view.findViewById(R.id.layout_delete_account);
        View layoutSettings = view.findViewById(R.id.layout_settings);
        View layoutSignOut = view.findViewById(R.id.layout_sign_out);

        // Set icons and texts for setting items
        setupSettingItem(layoutInformation, R.drawable.vector20_settings, "Thông tin tài khoản");
        setupSettingItem(layoutSwitchToCustomer, R.drawable.vector17_settings, "Giao diện khách hàng");
        setupSettingItem(layoutChangePassword, R.drawable.vector8_settings, "Thay đổi mật khẩu");
        setupSettingItemWithOverlay(layoutDeleteAccount, R.drawable.vector11_settings, R.drawable.vector10_settings, "Yêu cầu xóa tài khoản");
        setupSettingItem(layoutSettings, R.drawable.vector13_settings, "Cài đặt");

        dtb_user = FirebaseFirestore.getInstance();
        firebaseUser = FirebaseAuth.getInstance().getCurrentUser();
        mAuth = FirebaseAuth.getInstance();
        user.setUser_id(firebaseUser != null ? firebaseUser.getUid() : "");

        if (firebaseUser != null) {
            dtb_user.collection("Users")
                    .document(firebaseUser.getUid())
                    .get()
                    .addOnSuccessListener(documentSnapshot -> {
                        if (documentSnapshot.exists()) {
                            String username = documentSnapshot.getString("username");
                            String avatarURL = documentSnapshot.getString("avatarURL");

                            if (username != null) {
                                tvName.setText(username);
                            }
                            if (avatarURL != null && !avatarURL.isEmpty()) {
                                Picasso.get().load(avatarURL).into(imgAvatar);
                            }
                        }
                    })
                    .addOnFailureListener(e -> {
                        Toast.makeText(view.getContext(), "Không thể lấy thông tin.", Toast.LENGTH_SHORT).show();
                    });
        }

        // Click listeners
        tvEdit.setOnClickListener(v -> {
            startActivity(new Intent(getActivity(), ProfileManagement.class));
            requireActivity().overridePendingTransition(0, 0);
        });

        editIcon.setOnClickListener(v -> {
            startActivity(new Intent(getActivity(), ProfileManagement.class));
            requireActivity().overridePendingTransition(0, 0);
        });

        layoutInformation.setOnClickListener(v -> {
            startActivity(new Intent(getActivity(), ProfileManagement.class));
            requireActivity().overridePendingTransition(0, 0);
        });

        layoutSwitchToCustomer.setOnClickListener(v -> {
            if (firebaseUser == null) return;

            dtb_user.collection("Users")
                    .document(firebaseUser.getUid())
                    .update("currentRole", "customer")
                    .addOnSuccessListener(aVoid -> {
                        Toast.makeText(getContext(), "Đã chuyển sang giao diện khách hàng!", Toast.LENGTH_SHORT).show();
                        startActivity(new Intent(getActivity(), CustomerMainActivity.class));
                        requireActivity().finish();
                    })
                    .addOnFailureListener(e -> {
                        Toast.makeText(getContext(), "Chuyển vai trò thất bại.", Toast.LENGTH_SHORT).show();
                    });
        });

        layoutChangePassword.setOnClickListener(v -> {
            startActivity(new Intent(getActivity(), ForgotPasswordActivity.class));
            requireActivity().overridePendingTransition(0, 0);
        });

        layoutDeleteAccount.setOnClickListener(v -> {
            if (firebaseUser == null) return;

            dtb_user.collection("Users").document(firebaseUser.getUid())
                    .delete()
                    .addOnSuccessListener(aVoid -> {
                        firebaseUser.delete().addOnCompleteListener(task -> {
                            Toast.makeText(getContext(), "Đã xóa tài khoản!", Toast.LENGTH_SHORT).show();
                            startActivity(new Intent(getActivity(), LoginActivity.class));
                            requireActivity().finish();
                        });
                    })
                    .addOnFailureListener(e -> {
                        Toast.makeText(getContext(), "Xóa tài khoản thất bại.", Toast.LENGTH_SHORT).show();
                    });
        });

        layoutSettings.setOnClickListener(v -> {
            // TODO: Thêm hành động cho mục "Cài đặt" (ví dụ: mở SettingsActivity)
            Toast.makeText(getContext(), "Chức năng Cài đặt chưa được triển khai", Toast.LENGTH_SHORT).show();
        });

        layoutSignOut.setOnClickListener(v -> {
            mAuth.signOut();
            startActivity(new Intent(getActivity(), LoginActivity.class));
            requireActivity().finish();
        });

        return view;
    }

    private void setupSettingItem(View view, int iconResId, String text) {
        ImageView icon = view.findViewById(R.id.setting_icon);
        TextView textView = view.findViewById(R.id.setting_text);
        icon.setImageResource(iconResId);
        textView.setText(text);
    }

    private void setupSettingItemWithOverlay(View view, int primaryIconResId, int overlayIconResId, String text) {
        // Chỉ dùng primaryIconResId vì item_setting_row.xml không hỗ trợ overlay
        ImageView icon = view.findViewById(R.id.setting_icon);
        TextView textView = view.findViewById(R.id.setting_text);
        icon.setImageResource(primaryIconResId);
        textView.setText(text);
    }
}
```

### FragmentPages\Owner\OwnerVehicleFragment.java
```java
package com.uit.carrental.FragmentPages.Owner;

import android.app.ProgressDialog;
import android.content.Intent;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;
import com.uit.carrental.Adapter.OwnerVehicleAdapter;
import com.uit.carrental.Model.Vehicle;
import com.uit.carrental.Model.onClickInterface;
import com.uit.carrental.R;
import com.uit.carrental.Service.Vehicle.AddVehicleActivity;

import java.util.ArrayList;

public class OwnerVehicleFragment extends Fragment {

    private RecyclerView recyclerView;
    private OwnerVehicleAdapter adapter;
    private ArrayList<Vehicle> vehicles;
    private FirebaseFirestore dtbVehicle;
    private FirebaseAuth firebaseAuth;
    private ProgressDialog progressDialog;
    private Button btnAdd;
    private View view;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        view = inflater.inflate(R.layout.owner_fragment_vehicle, container, false);

        // Initialize views
        btnAdd = view.findViewById(R.id.btn_add);
        recyclerView = view.findViewById(R.id.vehicle_list);
        recyclerView.setHasFixedSize(true);
        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));

        // Initialize Firebase and ProgressDialog
        firebaseAuth = FirebaseAuth.getInstance();
        dtbVehicle = FirebaseFirestore.getInstance();
        progressDialog = new ProgressDialog(getActivity());
        progressDialog.setCancelable(false);
        progressDialog.setMessage("Đang lấy dữ liệu...");

        // Initialize adapter
        vehicles = new ArrayList<>();
        adapter = new OwnerVehicleAdapter(this, vehicles, position -> {
            // Click handled in adapter
        });
        recyclerView.setAdapter(adapter);

        // Set button listener
        btnAdd.setOnClickListener(v -> {
            Intent intent = new Intent(getActivity(), AddVehicleActivity.class);
            startActivity(intent);
            if (getActivity() != null) {
                getActivity().overridePendingTransition(0, 0);
            }
        });

        // Load data
        FirebaseUser firebaseUser = firebaseAuth.getCurrentUser();
        if (firebaseUser != null) {
            progressDialog.show();
            loadVehicles(firebaseUser.getUid());
        } else {
            Toast.makeText(getContext(), "Người dùng chưa đăng nhập", Toast.LENGTH_SHORT).show();
        }

        return view;
    }

    private void loadVehicles(String userId) {
        dtbVehicle.collection("Vehicles")
                .whereEqualTo("provider_id", userId)
                .get()
                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<QuerySnapshot> task) {
                        progressDialog.dismiss();
                        if (task.isSuccessful()) {
                            vehicles.clear(); // Clear old data
                            for (QueryDocumentSnapshot document : task.getResult()) {
                                Vehicle temp = new Vehicle();
                                temp.setVehicle_id(document.getId());
                                temp.setVehicle_name(document.getString("vehicle_name"));
                                temp.setVehicle_price(document.getString("vehicle_price"));
                                temp.setProvider_name(document.getString("provider_name"));
                                temp.setVehicle_imageURL(document.getString("vehicle_imageURL"));
                                temp.setVehicle_rating(document.getString("vehicle_rating"));
                                vehicles.add(temp);
                            }
                            adapter.notifyDataSetChanged();
                            if (vehicles.isEmpty()) {
                                Toast.makeText(getContext(), "Không có xe nào", Toast.LENGTH_SHORT).show();
                            }
                        } else {
                            Toast.makeText(getContext(), "Không thể lấy danh sách xe", Toast.LENGTH_SHORT).show();
                        }
                    }
                });
    }
}
```

### Model\Activity.java
```java
package com.uit.carrental.Model;


public class Activity {
    private String customer_id;
    private String provider_id;
    private String status;
    private String noti_id;
    private String vehicle_id;

    private String dropoff;

    private String pickup;

    public Activity()

    {

    }

    public Activity(String customer_id, String provide_id, String status, String noti_id, String vehicle_id) {
        this.customer_id = customer_id;
        this.provider_id = provide_id;
        this.status = status;
        this.noti_id = noti_id;
        this.vehicle_id = vehicle_id;
    }

    public String getCustomer_id() {
        return customer_id;
    }

    public void setCustomer_id(String customer_id) {
        this.customer_id = customer_id;
    }

    public String getProvider_id() {
        return provider_id;
    }

    public void setProvider_id(String provide_id) {
        this.provider_id = provide_id;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public String getNoti_id() {
        return noti_id;
    }

    public void setNoti_id(String noti_id) {
        this.noti_id = noti_id;
    }

    public String getVehicle_id() {
        return vehicle_id;
    }

    public void setVehicle_id(String vehicle_id) {
        this.vehicle_id = vehicle_id;
    }

    public void setPickup(String pickup) {
        this.pickup = pickup;

    }

    public void setDropoff(String dropoff) {
        this.dropoff = dropoff;
    }

    public String getDropoff() {
        return dropoff;
    }

    public String getPickup() {
        return pickup;
    }

}

```

### Model\CreateOrder.java
```java
//// File: CreateOrder.java
//package com.uit.carrental.Model;
//
//import android.os.Build;
//import androidx.annotation.RequiresApi;
//
//import com.uit.carrental.Service.ZaloPay.Constant.AppInfo;
//import com.uit.carrental.Service.ZaloPay.Helper.HMac.HMacUtil;
//
//import org.json.JSONObject;
//
//import java.io.OutputStream;
//import java.net.HttpURLConnection;
//import java.net.URL;
//import java.nio.charset.StandardCharsets;
//import java.text.SimpleDateFormat;
//import java.util.Date;
//import java.util.TimeZone;
//
//public class CreateOrder {
//
//    @RequiresApi(api = Build.VERSION_CODES.O)
//    public JSONObject createOrder(String appTransId) {
//        try {
//            long amount = 1000; // có thể lấy từ amount ngoài truyền vào
//
//            // Lấy thời gian theo chuẩn GMT+7
//            SimpleDateFormat sdf = new SimpleDateFormat("yyMMdd");
//            sdf.setTimeZone(TimeZone.getTimeZone("GMT+7"));
//            String appTime = sdf.format(new Date());
//
//            JSONObject order = new JSONObject();
//            order.put("app_id", AppInfo.APP_ID);
//            order.put("app_user", "user123"); // user định danh (tuỳ chỉnh)
//            order.put("app_time", System.currentTimeMillis()); // thời gian tạo đơn
//            order.put("amount", amount);
//            order.put("app_trans_id", appTime + "_" + appTransId); // định dạng yêu cầu
//            order.put("embed_data", "{}");
//            order.put("item", "[]");
//            order.put("description", "Thanh toán đơn thuê xe CarRental: " + appTransId);
//            order.put("bank_code", "zalopayapp"); // App mobile payment
//
//            // Build data to hash
//            String data = AppInfo.APP_ID + "|" + appTime + "_" + appTransId + "|" + AppInfo.APP_USER + "|" + amount + "|" + AppInfo.APP_NAME + "|{}|[]";
//            String mac = HMacUtil.HMacHexStringEncode("HmacSHA256", AppInfo.MAC_KEY, data);
//            order.put("mac", mac);
//
//            // Gửi HTTP request
//            URL url = new URL(AppInfo.URL_CREATE_ORDER);
//            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
//            connection.setRequestMethod("POST");
//            connection.setRequestProperty("Content-Type", "application/json");
//            connection.setDoOutput(true);
//
//            OutputStream os = connection.getOutputStream();
//            os.write(order.toString().getBytes(StandardCharsets.UTF_8));
//            os.close();
//
//            int responseCode = connection.getResponseCode();
//            if (responseCode == HttpURLConnection.HTTP_OK) {
//                java.util.Scanner s = new java.util.Scanner(connection.getInputStream()).useDelimiter("\\A");
//                String response = s.hasNext() ? s.next() : "";
//                s.close();
//                return new JSONObject(response);
//            } else {
//                throw new RuntimeException("Failed : HTTP error code : " + responseCode);
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//            return null;
//        }
//    }
//}

```

### Model\Message.java
```java
package com.uit.carrental.Model;

public class Message {
    private String content;
    private boolean isUser;

    public Message(String content, boolean isUser) {
        this.content = content;
        this.isUser = isUser;
    }

    public String getContent() {
        return content;
    }

    public boolean isUser() {
        return isUser;
    }
}
```

### Model\onClickInterface.java
```java
package com.uit.carrental.Model;
public interface onClickInterface {
    void setClick(int position);
}

```

### Model\Order.java
```java
package com.uit.carrental.Model;

public class Order {
    private String CustomerID;
    private String OrderID;
    private String ProvideID;
    private String vehicle_id;

    public Order() {

    }

    public Order(String customerID, String orderID, String provideID, String vehicl_id) {
        CustomerID = customerID;
        OrderID = orderID;
        ProvideID = provideID;
        vehicle_id = vehicl_id;

    }

    public String getCustomerID() {
        return CustomerID;
    }

    public void setCustomerID(String customerID) {
        CustomerID = customerID;
    }

    public String getOrderID() {
        return OrderID;
    }

    public void setOrderID(String orderID) {
        OrderID = orderID;
    }

    public String getProvideID() {
        return ProvideID;
    }

    public void setProvideID(String provideID) {
        ProvideID = provideID;
    }

    public String getVehicle_id() {
        return vehicle_id;
    }

    public void setVehicle_id(String vehicle_id) {
        this.vehicle_id = vehicle_id;
    }
}


```

### Model\User.java
```java
package com.uit.carrental.Model;

import android.os.Parcel;
import android.os.Parcelable;
import java.util.Map;

public class User implements Parcelable {

    private String email;
    private String user_id;
    private String username;
    private String avatarURL;
    private String birthday;
    private String phoneNumber;
    private String address;
    private String city;
    private String ciCardFront;
    private String ciCardBehind;
    private String role;
    private Map<String, Boolean> roles;
    private String currentRole;

    public User() {
        address = "";
        email = "";
        user_id = "";
        username = "";
        avatarURL = "";
        birthday = "";
        phoneNumber = "";
        city = "";
        ciCardFront = "";
        ciCardBehind = "";
    }

    protected User(Parcel in) {
        email = in.readString();
        user_id = in.readString();
        username = in.readString();
        avatarURL = in.readString();
        birthday = in.readString();
        phoneNumber = in.readString();
        address = in.readString();
        city = in.readString();
        ciCardFront = in.readString();
        ciCardBehind = in.readString();
    }

    public static final Creator<User> CREATOR = new Creator<User>() {
        @Override
        public User createFromParcel(Parcel in) {
            return new User(in);
        }

        @Override
        public User[] newArray(int size) {
            return new User[size];
        }
    };

    // --- Getter và Setter ---
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public String getUser_id() { return user_id; }
    public void setUser_id(String user_id) { this.user_id = user_id; }

    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }

    public String getAvatarURL() { return avatarURL; }
    public void setAvatarURL(String avatarURL) { this.avatarURL = avatarURL; }

    public String getBirthday() { return birthday; }
    public void setBirthday(String birthday) { this.birthday = birthday; }

    public String getPhoneNumber() { return phoneNumber; }
    public void setPhoneNumber(String phoneNumber) { this.phoneNumber = phoneNumber; }

    public String getAddress() { return address; }
    public void setAddress(String address) { this.address = address; }

    public String getCity() { return city; }
    public void setCity(String city) { this.city = city; }

    public String getCiCardFront() { return ciCardFront; }
    public void setCiCardFront(String ciCardFront) { this.ciCardFront = ciCardFront; }

    public String getCiCardBehind() { return ciCardBehind; }
    public void setCiCardBehind(String ciCardBehind) { this.ciCardBehind = ciCardBehind; }

    public String getRole() { return role; }
    public void setRole(String role) { this.role = role; }

    public Map<String, Boolean> getRoles() { return roles; }
    public void setRoles(Map<String, Boolean> roles) { this.roles = roles; }

    public String getCurrentRole() { return currentRole; }
    public void setCurrentRole(String currentRole) { this.currentRole = currentRole; }

    // --- Parcelable ---
    @Override
    public int describeContents() { return 0; }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeString(email);
        dest.writeString(user_id);
        dest.writeString(username);
        dest.writeString(avatarURL);
        dest.writeString(birthday);
        dest.writeString(phoneNumber);
        dest.writeString(address);
        dest.writeString(city);
        dest.writeString(ciCardFront);
        dest.writeString(ciCardBehind);
    }
}

```

### Model\UserClient.java
```java
package com.uit.carrental.Model;


import android.app.Application;

import com.uit.carrental.Model.User;


public class UserClient extends Application {

    private User user = null;

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

}

```

### Model\Vehicle.java
```java
package com.uit.carrental.Model;

public class Vehicle {
    private String vehicle_id, provider_id, provider_name;
    private String owner_name, provider_gmail, provider_phone, provider_address;
    private String vehicle_name, vehicle_price, vehicle_seats, vehicle_number, vehicle_availability;
    private String vehicle_imageURL, vehicle_rating;
    private String fuel_type, max_speed, transmission, doors_seats;

    public Vehicle() {
        this.vehicle_id = "";
        this.owner_name = "";
        this.provider_id = "";
        this.provider_name = "";
        this.provider_gmail = "";
        this.provider_phone = "";
        this.provider_address = "";
        this.vehicle_name = "";
        this.vehicle_price = "";
        this.vehicle_seats = "";
        this.vehicle_number = "";
        this.vehicle_availability = "";
        this.vehicle_imageURL = "";
        this.vehicle_rating = "";
        this.fuel_type = "";
        this.max_speed = "";
        this.transmission = "";
        this.doors_seats = "";
    }

    public Vehicle(String vehicle_id, String provider_id, String provider_name, String owner_name,
                   String provider_gmail, String provider_phone, String provider_address,
                   String vehicle_name, String vehicle_price, String vehicle_seats,
                   String vehicle_number, String vehicle_availability, String vehicle_imageURL,
                   String vehicle_rating, String fuel_type, String max_speed,
                   String transmission, String doors_seats) {
        this.vehicle_id = vehicle_id;
        this.owner_name = owner_name;
        this.provider_id = provider_id;
        this.provider_name = provider_name;
        this.provider_gmail = provider_gmail;
        this.provider_phone = provider_phone;
        this.provider_address = provider_address;
        this.vehicle_name = vehicle_name;
        this.vehicle_price = vehicle_price;
        this.vehicle_seats = vehicle_seats;
        this.vehicle_number = vehicle_number;
        this.vehicle_availability = vehicle_availability;
        this.vehicle_imageURL = vehicle_imageURL;
        this.vehicle_rating = vehicle_rating;
        this.fuel_type = fuel_type;
        this.max_speed = max_speed;
        this.transmission = transmission;
        this.doors_seats = doors_seats;
    }

    // Getters and setters
    public String getVehicle_id() { return vehicle_id; }
    public void setVehicle_id(String vehicle_id) { this.vehicle_id = vehicle_id; }
    public String getProvider_id() { return provider_id; }
    public void setProvider_id(String provider_id) { this.provider_id = provider_id; }
    public String getProvider_name() { return provider_name; }
    public void setProvider_name(String provider_name) { this.provider_name = provider_name; }
    public String getOwner_name() { return owner_name; }
    public void setOwner_name(String owner_name) { this.owner_name = owner_name; }
    public String getProvider_gmail() { return provider_gmail; }
    public void setProvider_gmail(String provider_gmail) { this.provider_gmail = provider_gmail; }
    public String getProvider_phone() { return provider_phone; }
    public void setProvider_phone(String provider_phone) { this.provider_phone = provider_phone; }
    public String getProvider_address() { return provider_address; }
    public void setProvider_address(String provider_address) { this.provider_address = provider_address; }
    public String getVehicle_name() { return vehicle_name; }
    public void setVehicle_name(String vehicle_name) { this.vehicle_name = vehicle_name; }
    public String getVehicle_price() { return vehicle_price; }
    public void setVehicle_price(String vehicle_price) { this.vehicle_price = vehicle_price; }
    public String getVehicle_seats() { return vehicle_seats; }
    public void setVehicle_seats(String vehicle_seats) { this.vehicle_seats = vehicle_seats; }
    public String getVehicle_number() { return vehicle_number; }
    public void setVehicle_number(String vehicle_number) { this.vehicle_number = vehicle_number; }
    public String getVehicle_availability() { return vehicle_availability; }
    public void setVehicle_availability(String vehicle_availability) { this.vehicle_availability = vehicle_availability; }
    public String getVehicle_imageURL() { return vehicle_imageURL; }
    public void setVehicle_imageURL(String vehicle_imageURL) { this.vehicle_imageURL = vehicle_imageURL; }
    public String getVehicle_rating() { return vehicle_rating; }
    public void setVehicle_rating(String vehicle_rating) { this.vehicle_rating = vehicle_rating; }
    public String getFuel_type() { return fuel_type; }
    public void setFuel_type(String fuel_type) { this.fuel_type = fuel_type; }
    public String getMax_speed() { return max_speed; }
    public void setMax_speed(String max_speed) { this.max_speed = max_speed; }
    public String getTransmission() { return transmission; }
    public void setTransmission(String transmission) { this.transmission = transmission; }
    public String getDoors_seats() { return doors_seats; }
    public void setDoors_seats(String doors_seats) { this.doors_seats = doors_seats; }
}
```

### Service\Activity\CustomerActivityDetail.java
```java
package com.uit.carrental.Service.Activity;

import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.os.StrictMode;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;

import com.uit.carrental.ActivityPages.CustomerMainActivity;
import com.uit.carrental.Service.ZaloPay.Api.CreateOrder;
import com.uit.carrental.Model.Activity;
import com.uit.carrental.Model.User;
import com.uit.carrental.Model.Vehicle;
import com.uit.carrental.R;
import com.uit.carrental.Service.ZaloPay.Constant.AppInfo;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;
import com.google.firebase.firestore.SetOptions;
import com.squareup.picasso.Picasso;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.OnFailureListener;

import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import vn.zalopay.sdk.Environment;
import vn.zalopay.sdk.ZaloPayError;
import vn.zalopay.sdk.ZaloPaySDK;
import vn.zalopay.sdk.listeners.PayOrderListener;

import com.google.firebase.Timestamp;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class CustomerActivityDetail extends AppCompatActivity {

    FirebaseFirestore dtb;
    CreateOrder orderApi;
    Intent intent;
    String ProvideID, vehicle_id, ownername, owneremail, ownerphone, vehiclename, vehicleprice, vehicleaddress, vehiclepickup, vehicledrop, totalcost;
    String NotiID,noti_status;
    String amount = "1000";
    String token;
    String orderId ;
    int bit;
    ImageView vehicleImage;
    String vnp_url, vnp_tmnCode;
    FirebaseFirestore db = FirebaseFirestore.getInstance();
    private ArrayList<Vehicle> ls = new ArrayList<Vehicle>();
    private TextView tv_id,name,email,phoneNumber, tv_status;// Thông tin nhà cung cấp
    private TextView tv_BrandCar,tv_Gia,tv_DiaDiem,pickup,dropoff,totalCost;// Thông tin xe
    private Button btn_payment, btn_back;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.customer_booking_detail);
        intent = getIntent();

        String OrderID = intent.getStringExtra("NotiID");
        NotiID = OrderID;

        init();

        StrictMode.ThreadPolicy policy = new
                StrictMode.ThreadPolicy.Builder().permitAll().build();
        StrictMode.setThreadPolicy(policy);

        ZaloPaySDK.init(AppInfo.APP_ID, Environment.SANDBOX);

        dtb = FirebaseFirestore.getInstance();
        dtb.collection("Notification")
                .whereEqualTo("noti_id", NotiID)
                .get()
                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<QuerySnapshot> task) {
                        if (task.isSuccessful()) {
                            for (QueryDocumentSnapshot document : task.getResult()) {

                                Activity temp = new Activity();
                                temp.setNoti_id(document.getId());
                                temp.setProvider_id(document.getString("provider_id"));
                                temp.setVehicle_id(document.getString("vehicle_id"));
                                temp.setStatus(document.getString("status"));
                                temp.setPickup(document.getString("pickup"));
                                temp.setDropoff(document.getString("dropoff"));

                                vehiclepickup = temp.getPickup();
                                vehicledrop = temp.getDropoff();
                                ProvideID = temp.getProvider_id();
                                vehicle_id = temp.getVehicle_id();
                                noti_status = temp.getStatus();

                                if (document.contains("order_id")) {
                                    orderId = document.getString("order_id");
                                    Log.e("OrderID", "order_id: " + orderId);
                                }

                                tv_id.setText(NotiID);
                                updateStatusAndButton(noti_status);

                                getuser(ProvideID);
                                getvehicle(vehicle_id);
                            }
                        } else {
                            Toast.makeText(CustomerActivityDetail.this, "Không thể lấy thông báo", Toast.LENGTH_SHORT).show();
                        }
                    }

                    private void updateStatusAndButton(String status) {
                        switch (status) {
                            case "Dang cho":
                                tv_status.setText("Chưa được xác nhận");
                                btn_payment.setVisibility(View.GONE);
                                break;
                            case "Xac nhan":
                                tv_status.setText("Đã xác nhận");
                                btn_payment.setVisibility(View.VISIBLE);
                                break;
                            case "Thanh toan":
                                tv_status.setText("Đang chờ thanh toán");
                                btn_payment.setVisibility(View.VISIBLE);
                                break;
                            case "Khong duoc xac nhan":
                                tv_status.setText("Không được xác nhận");
                                btn_payment.setVisibility(View.GONE);
                                break;
                            default:
                                tv_status.setText("Đã thanh toán");
                                btn_payment.setVisibility(View.GONE);
                                break;
                        }
                    }

                });


        btn_payment.setOnClickListener(v -> {
            if (orderId != null) {
                createOrderAndPay(); // --- CHỈNH SỬA ---
            } else {
                Toast.makeText(this, "Không tìm thấy order_id!", Toast.LENGTH_SHORT).show();
            }
        });
        btn_back.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                finish();
            }
        });

    }
    private void postpayment() {
        FirebaseFirestore db = FirebaseFirestore.getInstance();
        String orderId = intent.getStringExtra("order_id");

        Map<String, Object> updateData = new HashMap<>();
        updateData.put("payment_status", "paid");
        updateData.put("status", "processing");

        db.collection("Orders")
                .document(orderId)
                .update(updateData)
                .addOnSuccessListener(new OnSuccessListener<Void>() {
                    @Override
                    public void onSuccess(Void unused) {
                        Log.e("Payment Update", "Cập nhật trạng thái thành công!");
                    }
                })
                .addOnFailureListener(new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {
                        Log.e("Payment Update", "Cập nhật thất bại: " + e.getMessage());
                    }
                });
    }
    @RequiresApi(api = Build.VERSION_CODES.O)
    private void createOrderAndPay() { // --- CHỈNH SỬA ---
        try {
            CreateOrder createOrder = new CreateOrder();
            JSONObject data = createOrder.createOrder(amount);

            if (data == null) {
                Toast.makeText(this, "Không thể tạo đơn hàng!", Toast.LENGTH_SHORT).show();
                return;
            }

            String code = data.getString("returncode");
            if ("1".equals(code)) {
                String token = data.getString("zptranstoken");
                checkout(token);
            } else {
                Toast.makeText(this, "Lỗi tạo đơn hàng!", Toast.LENGTH_SHORT).show();
            }
        } catch (Exception e) {
            Log.e("ZaloPay", "Exception: " + e.getMessage());
            Toast.makeText(this, "Exception: " + e.getMessage(), Toast.LENGTH_SHORT).show();
        }
    }


    private void updateOrderAfterPayment(String orderId, String providerId) {
        FirebaseFirestore db = FirebaseFirestore.getInstance();

        // Update Order
        Map<String, Object> updates = new HashMap<>();
        updates.put("status", "Đã thanh toán");
        updates.put("payment_method", "zalo_pay");

        db.collection("Orders").document(orderId)
                .update(updates)
                .addOnSuccessListener(aVoid -> {
                    Toast.makeText(this, "Thanh toán thành công!", Toast.LENGTH_SHORT).show();

                    // Tạo Notification cho chủ xe
                    createPaymentSuccessNotification(providerId);

                    // Chuyển màn
                    Intent intent = new Intent(this, CustomerMainActivity.class); // hoặc RequestSuccessActivity.class
                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);
                    startActivity(intent);
                    finish();
                })
                .addOnFailureListener(e -> {
                    Toast.makeText(this, "Có lỗi khi cập nhật đơn hàng.", Toast.LENGTH_SHORT).show();
                });
    }

    private void createPaymentSuccessNotification(String providerId) {
        FirebaseFirestore db = FirebaseFirestore.getInstance();

        Map<String, Object> notification = new HashMap<>();
        notification.put("user_id", providerId);
        notification.put("title", "Thanh toán thành công");
        notification.put("content", "Khách hàng đã thanh toán đơn thuê xe của bạn.");
        notification.put("timestamp", new Timestamp(new Date()));
        notification.put("status", "unread");

        db.collection("Notifications")
                .add(notification)
                .addOnSuccessListener(documentReference -> {
                    // Notification đã được tạo cho chủ xe
                })
                .addOnFailureListener(e -> {
                    // Có lỗi xảy ra
                });
    }

    private void checkout(String token) {
        ZaloPaySDK.getInstance().payOrder(this, token, "demozpdk://app", new PayOrderListener() {
            @Override
            public void onPaymentSucceeded(String transId, String zpTransToken, String appTransId) {
                runOnUiThread(() -> {
                    postpayment();
                    updateOrderAfterPayment(orderId, ProvideID);
                });
            }

            @Override
            public void onPaymentCanceled(String zpTransToken, String appTransId) {
                runOnUiThread(() -> Toast.makeText(CustomerActivityDetail.this, "Bạn đã hủy thanh toán.", Toast.LENGTH_SHORT).show());
            }

            @Override
            public void onPaymentError(ZaloPayError zaloPayError, String zpTransToken, String appTransId) {
                runOnUiThread(() -> Toast.makeText(CustomerActivityDetail.this, "Thanh toán thất bại!", Toast.LENGTH_SHORT).show());
            }
        });
    }


    private void setstatus(){
        if(noti_status.equals( "Dang cho"))
        {
            tv_status.setText("Nhà cung cấp chưa xác nhận");
        }
        else
        {
            if(noti_status.equals("Thanh toan"))
            {
                tv_status.setText("Đang chờ thanh toán");
            }
            else
            if (noti_status.equals("Khong xac nhan")) {
                tv_status.setText("Nhà cung cấp không xác nhận");
            }
            else{
                tv_status.setText("Đã xác nhận thuê xe");
            }
        }
    }
    private void getuser(String ProvideID){
        dtb.collection("Users")
                .whereEqualTo("user_id", ProvideID)
                .get()
                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<QuerySnapshot> task) {
                        if (task.isSuccessful()) {
                            for (QueryDocumentSnapshot document : task.getResult()) {

                                User user = new User();
                                ownername = document.get("username").toString();
                                owneremail = document.get("email").toString();
                                ownerphone = document.get("phoneNumber").toString();
                                user.setUser_id(document.get("user_id").toString());
                                user.setUsername(ownername);
                                user.setEmail(owneremail);
                                user.setPhoneNumber(ownerphone);
                                name.setText(user.getUsername());
                                email.setText(user.getEmail());
                                phoneNumber.setText(user.getPhoneNumber());
                            }
                        } else {
                            Toast.makeText(CustomerActivityDetail.this, "Không thể lấy thông tin nhà cung cấp", Toast.LENGTH_SHORT).show();
                        }
                    }
                });
    }
    private void getvehicle(String vehicle_id){
        dtb.collection("Vehicles")
                .whereEqualTo("vehicle_id", vehicle_id)
                .get()
                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<QuerySnapshot> task) {
                        if (task.isSuccessful()) {
                            for (QueryDocumentSnapshot document : task.getResult()) {

                                Vehicle temp = new Vehicle();
                                temp.setVehicle_id(document.getId());

                                vehiclename = document.get("vehicle_name").toString();
                                vehicleprice = document.get("vehicle_price").toString();
                                vehicleaddress = document.get("provider_address").toString();

                                temp.setVehicle_name(vehiclename);
                                temp.setVehicle_availability(document.get("vehicle_availability").toString());
                                temp.setVehicle_price(vehicleprice);
                                temp.setProvider_address(vehicleaddress);

                                tv_BrandCar.setText(temp.getVehicle_name());
                                tv_Gia.setText(temp.getVehicle_price() + "/ngày");
                                tv_DiaDiem.setText(temp.getProvider_address());

                                pickup.setText(vehiclepickup);
                                dropoff.setText(vehicledrop);
                                totalcost = calculate(vehiclepickup, vehicledrop);
                                totalCost.setText(totalcost);

                                amount = totalcost;

                                temp.setVehicle_imageURL(document.get("vehicle_imageURL").toString());
                                if (!document.get("vehicle_imageURL").toString().isEmpty()) {
                                    Picasso.get().load(temp.getVehicle_imageURL()).into(vehicleImage);
                                }
                                else {
                                    temp.setVehicle_imageURL("");
                                }
                            }
                        } else {
                            Toast.makeText(CustomerActivityDetail.this, "Không thể lấy thông tin xe", Toast.LENGTH_SHORT).show();
                        }
                    }
                });
    }
    private String calculate(String a, String b) {
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

            Date startDate = sdf.parse(a);
            Date endDate = sdf.parse(b);

            long diffInMillies = endDate.getTime() - startDate.getTime();
            long daysBetween = diffInMillies / (1000 * 60 * 60 * 24);

            if (daysBetween <= 0) {
                Toast.makeText(this, "Ngày trả phải sau ngày nhận!", Toast.LENGTH_SHORT).show();
                return "0";
            }

            int pricePerDay = Integer.parseInt(tv_Gia.getText().toString().substring(0, tv_Gia.getText().toString().indexOf(" ")));
            long totalPrice = pricePerDay * daysBetween;

            Log.e("Total Days", String.valueOf(daysBetween));
            Log.e("Total Price", String.valueOf(totalPrice));

            return String.valueOf(totalPrice);

        } catch (ParseException e) {
            e.printStackTrace();
            Toast.makeText(this, "Định dạng ngày không hợp lệ!", Toast.LENGTH_SHORT).show();
            return "0";
        }
    }
    public void init(){
        tv_id=findViewById(R.id.txtview_noti_id);
        tv_status=findViewById(R.id.txtview_noti_status);

        email=findViewById(R.id.txtview_noti_email);
        name=findViewById(R.id.txtview_noti_name);
        phoneNumber=findViewById(R.id.txtview_noti_phoneNumber);
        tv_BrandCar=findViewById(R.id.txtview_noti_BrandCar);
        tv_DiaDiem=findViewById(R.id.txt_checkout_address);

        btn_payment=findViewById(R.id.btn_customer_pay);
        btn_back=findViewById(R.id.btn_noti_back);

        tv_Gia=findViewById(R.id.txtview_noti_price);
        pickup=findViewById(R.id.tv_noti_pickup);
        dropoff=findViewById(R.id.tv_noti_dropoff);
        totalCost=findViewById(R.id.txtview_noti_totalCost);
        vehicleImage=findViewById(R.id.img_noti_car);

        //btn_payment.setVisibility(View.GONE);
        //btn_payment.setEnabled(false);
    }
    private int getday(String date){
        int day = 31;
        //
        return day;
    }
    private int getmonth(String date){
        int month = 12;
        //
        return month;
    }
    private int getyear(String date){
        int year = 2022;
        //
        return year;
    }
    @Override
    protected void onNewIntent(Intent intent) {
        super.onNewIntent(intent);
        ZaloPaySDK.getInstance().onResult(intent);
    }
}

```

### Service\Activity\OwnerActivityDetail.java
```java
package com.uit.carrental.Service.Activity;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import com.uit.carrental.ActivityPages.OwnerMainActivity;
import com.uit.carrental.Model.Activity;
import com.uit.carrental.Model.User;
import com.uit.carrental.Model.Vehicle;
import com.uit.carrental.R;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;
import com.squareup.picasso.Picasso;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class OwnerActivityDetail extends AppCompatActivity {

    FirebaseFirestore dtb;
    Intent intent;
    String ProvideID, vehicle_id, vehiclename, vehicleprice, vehicleaddress, vehiclepickup, vehicledrop, totalcost;
    String CustomerID;
    String NotiID,noti_status;
    ImageView vehicleImage;
    private Activity temp = new Activity();


    private ArrayList<Vehicle> ls = new ArrayList<Vehicle>();
    private TextView tv_id,name,email,phoneNumber, tv_status;// Thông tin nhà cung cấp
    private TextView tv_BrandCar,tv_Gia,tv_DiaDiem,pickup,dropoff,totalCost;// Thông tin xe
    private Button btn_xacnhan,btn_huy,btn_back;

//    APIService apiService;
//
//    FirebaseUser user;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.owner_booking_detail);
        intent = getIntent();

        String OrderID = intent.getStringExtra("NotiID");
        NotiID = OrderID;

        init();

        dtb = FirebaseFirestore.getInstance();
        dtb.collection("Notification")
                .whereEqualTo("noti_id", NotiID)
                .get()
                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<QuerySnapshot> task) {
                        if (task.isSuccessful()) {
                            for (QueryDocumentSnapshot document : task.getResult()) {

//                            Notification temp = new Notification();
                                temp.setNoti_id(document.getId());
                                temp.setCustomer_id(document.get("customer_id").toString());
                                temp.setVehicle_id(document.get("vehicle_id").toString());
                                temp.setStatus(document.get("status").toString());

                                vehiclepickup = document.get("pickup").toString();
                                vehicledrop = document.get("dropoff").toString();

                                CustomerID = temp.getCustomer_id();
                                vehicle_id = temp.getVehicle_id();
                                noti_status=temp.getStatus();

                                tv_id.setText(NotiID);

                                if(noti_status.equals( "Dang cho"))
                                {
                                    tv_status.setText("Chưa được xác nhận");
                                }
                                else
                                {
                                    if(tv_status.equals( "Thanh toan"))
                                    {
                                        tv_status.setText("Đang chờ thanh toán");
                                    }
                                    else
                                    if(noti_status.equals("Xac nhan"))
                                    {
                                        tv_status.setText("Đã xác nhận");
                                    }
                                    else
                                    if (noti_status.equals("Khong duoc xac nhan"))
                                    {
                                        tv_status.setText("Không được xác nhận");
                                    }
                                    else {
                                        tv_status.setText("Đã thanh toán");
                                    }
                                }
                                getuser(CustomerID);
                                getvehicle(vehicle_id);

                            }
                        } else {
                            Toast.makeText(OwnerActivityDetail.this, "Không thể lấy thông báo", Toast.LENGTH_SHORT).show();
                        }
                    }
                });
        btn_back.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent = new Intent(OwnerActivityDetail.this, OwnerMainActivity.class);
                startActivity(intent);
            }
        });
        btn_huy.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                update_noti_huy();
            }
        });

        btn_xacnhan.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                update_noti_xacnhan();
                createOrderFromNotification(NotiID);

            }
        });
    }
    private String calculate(String a, String b) {
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

            Date startDate = sdf.parse(a);
            Date endDate = sdf.parse(b);

            long diffInMillies = endDate.getTime() - startDate.getTime();
            long daysBetween = diffInMillies / (1000 * 60 * 60 * 24);

            if (daysBetween <= 0) {
                Toast.makeText(this, "Ngày trả phải sau ngày nhận!", Toast.LENGTH_SHORT).show();
                return "0";
            }

            int pricePerDay = Integer.parseInt(tv_Gia.getText().toString().substring(0, tv_Gia.getText().toString().indexOf(" ")));
            long totalPrice = pricePerDay * daysBetween;

            Log.e("Total Days", String.valueOf(daysBetween));
            Log.e("Total Price", String.valueOf(totalPrice));

            return String.valueOf(totalPrice);

        } catch (ParseException e) {
            e.printStackTrace();
            Toast.makeText(this, "Định dạng ngày không hợp lệ!", Toast.LENGTH_SHORT).show();
            return "0";
        }
    }
    private void getuser(String ProvideID){
        dtb.collection("Users")
                .whereEqualTo("user_id", CustomerID)
                .get()
                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<QuerySnapshot> task) {
                        if (task.isSuccessful()) {
                            for (QueryDocumentSnapshot document : task.getResult()) {

                                User user = new User();
                                user.setUser_id(document.get("user_id").toString());
                                user.setUsername(document.get("username").toString());
                                user.setEmail(document.get("email").toString());
                                user.setPhoneNumber(document.get("phoneNumber").toString());
                                name.setText(user.getUsername());
                                email.setText(user.getEmail());
                                phoneNumber.setText(user.getPhoneNumber());
                            }
                        } else {
                            Toast.makeText(OwnerActivityDetail.this, "Không thể lấy thông tin nhà cung cấp", Toast.LENGTH_SHORT).show();
                        }
                    }
                });
    }
    private void getvehicle(String vehicle_id){
        dtb.collection("Vehicles")
                .whereEqualTo("vehicle_id", vehicle_id)
                .get()
                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<QuerySnapshot> task) {
                        if (task.isSuccessful()) {
                            for (QueryDocumentSnapshot document : task.getResult()) {

                                Vehicle temp = new Vehicle();
                                temp.setVehicle_id(document.getId());

                                vehiclename = document.get("vehicle_name").toString();
                                vehicleprice = document.get("vehicle_price").toString();
                                vehicleaddress = document.get("provider_address").toString();

                                temp.setVehicle_name(document.get("vehicle_name").toString());
                                temp.setVehicle_availability(document.get("vehicle_availability").toString());
                                temp.setVehicle_price(document.get("vehicle_price").toString());


                                tv_BrandCar.setText(temp.getVehicle_name());
                                tv_Gia.setText(temp.getVehicle_price() + "/ngày");
                                tv_DiaDiem.setText(temp.getProvider_address());
                                temp.setProvider_address(document.get("provider_address").toString());

                                tv_DiaDiem.setText(vehicleaddress);
                                pickup.setText(vehiclepickup);
                                dropoff.setText(vehicledrop);
                                totalcost = calculate(vehiclepickup, vehicledrop);
                                totalCost.setText(totalcost);

                                temp.setVehicle_imageURL(document.get("vehicle_imageURL").toString());
                                if (!document.get("vehicle_imageURL").toString().isEmpty()) {
                                    Picasso.get().load(temp.getVehicle_imageURL()).into(vehicleImage);
                                }
                                else {
                                    temp.setVehicle_imageURL("");
                                }
                            }
                        } else {
                            Toast.makeText(OwnerActivityDetail.this, "Không thể lấy thông tin xe", Toast.LENGTH_SHORT).show();
                        }
                    }
                });
    }

    private void update_noti_huy(){

        Map<String, Object> data = new HashMap<>();
        data.put("status", "Khong xac nhan");
        dtb.collection("Notification").document(temp.getNoti_id()).update(data)
                .addOnSuccessListener(new OnSuccessListener<Void>() {
                    @Override
                    public void onSuccess(Void aVoid) {
                        Toast.makeText(OwnerActivityDetail.this, "Đã hủy đơn hàng", Toast.LENGTH_LONG).show();
                        tv_status.setText("Không được xác nhận");
                    }
                })
                .addOnFailureListener(new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {
                        Toast.makeText(OwnerActivityDetail.this, "Lỗi hủy đơn hàng", Toast.LENGTH_LONG).show();
                    }
                });

    }
    private void update_noti_xacnhan(){

        Map<String, Object> data = new HashMap<>();
        data.put("status", "Xac nhan");
        dtb.collection("Notification").document(temp.getNoti_id()).update(data)
                .addOnSuccessListener(new OnSuccessListener<Void>() {
                    @Override
                    public void onSuccess(Void aVoid) {
                        Toast.makeText(OwnerActivityDetail.this, "Đã xác nhận", Toast.LENGTH_LONG).show();
                        tv_status.setText("Đã xác nhận");
                    }
                })
                .addOnFailureListener(new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {
                        Toast.makeText(OwnerActivityDetail.this, "Lỗi hủy đơn hàng", Toast.LENGTH_LONG).show();
                    }
                });

    }
    public void init(){
        tv_id=findViewById(R.id.txtview_noti_id);
        email=findViewById(R.id.txtview_noti_email);
        name=findViewById(R.id.txtview_noti_name);
        phoneNumber=findViewById(R.id.txtview_noti_phoneNumber);
        tv_BrandCar=findViewById(R.id.txtview_noti_BrandCar);
        tv_DiaDiem=findViewById(R.id.txt_checkout_address);

        tv_Gia=findViewById(R.id.txtview_noti_price);
        pickup=findViewById(R.id.tv_noti_pickup);
        dropoff=findViewById(R.id.tv_noti_dropoff);
        totalCost=findViewById(R.id.txtview_noti_totalCost);
        tv_status=findViewById(R.id.txtview_noti_status);

        btn_xacnhan=findViewById(R.id.btn_noti_XacNhan);
        btn_huy=findViewById(R.id.btn_noti_huy);
        btn_back=findViewById(R.id.btn_noti_back);
        vehicleImage=findViewById(R.id.img_noti_car);
    }

    // OwnerActivityDetail.java

    private void createOrderFromNotification(String notiId) {
        FirebaseFirestore db = FirebaseFirestore.getInstance();
        db.collection("Notification").document(notiId).get()
                .addOnSuccessListener(documentSnapshot -> {
                    if (documentSnapshot.exists()) {
                        Map<String, Object> notiData = documentSnapshot.getData();
                        if (notiData == null) return;

                        Map<String, Object> orderData = new HashMap<>();
                        orderData.put("customer_id", notiData.get("customer_id"));
                        orderData.put("provider_id", notiData.get("provider_id"));
                        orderData.put("vehicle_id", notiData.get("vehicle_id"));
                        orderData.put("pickup_time", notiData.get("pickup"));
                        orderData.put("dropoff_time", notiData.get("dropoff"));
                        orderData.put("status", "pending");
                        orderData.put("payment_status", "pending");

                        db.collection("Orders").add(orderData)
                                .addOnSuccessListener(orderRef -> {
                                    Log.d("CreateOrder", "Order created: " + orderRef.getId());

                                    // Update notification with order_id
                                    Map<String, Object> updateData = new HashMap<>();
                                    updateData.put("order_id", orderRef.getId());
                                    db.collection("Notification").document(notiId)
                                            .update(updateData)
                                            .addOnSuccessListener(aVoid -> {
                                                Log.d("Notification Update", "order_id updated in notification!");
                                            })
                                            .addOnFailureListener(e -> {
                                                Log.e("Notification Update", "Failed to update notification", e);
                                            });
                                })
                                .addOnFailureListener(e -> {
                                    Log.e("CreateOrder", "Failed to create order", e);
                                });
                    }
                })
                .addOnFailureListener(e -> {
                    Log.e("FetchNoti", "Failed to fetch notification", e);
                });
    }





}

```

### Service\Api\CloudinaryApi.java
```java
package com.uit.carrental.Service.Api;

import android.content.Context;
import android.net.Uri;
import android.util.Log;

import com.cloudinary.android.MediaManager;
import com.cloudinary.android.callback.ErrorInfo;
import com.cloudinary.android.callback.UploadCallback;

import java.util.HashMap;
import java.util.Map;

public class CloudinaryApi {

    private static final String CLOUD_NAME = "drc8ylzsd";
    private static final String API_KEY = "186315811678634";
    private static final String UPLOAD_PRESET = "car_rent_unsigned";

    private static boolean initialized = false;

    public static void init(Context context) {
        if (initialized) return;

        Map<String, Object> config = new HashMap<>();
        config.put("cloud_name", CLOUD_NAME);
        config.put("api_key", API_KEY);
        config.put("unsigned", true);
        MediaManager.init(context, config);
        initialized = true;
    }

    public static void uploadImage(Context context, Uri imageUri, UploadCallbackCustom callback) {
        init(context);

        MediaManager.get().upload(imageUri)
                .option("upload_preset", UPLOAD_PRESET)
                .option("unsigned", true) // THÊM DÒNG NÀY !!!
                .callback(new UploadCallback() {
                    @Override
                    public void onStart(String requestId) {
                        Log.d("Cloudinary", "Upload Started: " + requestId);
                    }

                    @Override
                    public void onProgress(String requestId, long bytes, long totalBytes) {
                        Log.d("Cloudinary", "Progress: " + bytes + "/" + totalBytes);
                    }

                    @Override
                    public void onSuccess(String requestId, Map resultData) {
                        String url = (String) resultData.get("secure_url");
                        if (callback != null) callback.onSuccess(url);
                    }

                    @Override
                    public void onError(String requestId, ErrorInfo error) {
                        if (callback != null) callback.onFailure(new Exception(error.getDescription()));
                    }

                    @Override
                    public void onReschedule(String requestId, ErrorInfo error) {
                        if (callback != null) callback.onFailure(new Exception(error.getDescription()));
                    }
                })
                .dispatch();
    }


    public interface UploadCallbackCustom {
        void onSuccess(String url);
        void onFailure(Exception e);
    }
}

```

### Service\Booking\CarDetailActivity.java
```java
package com.uit.carrental.Service.Booking;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;

import androidx.appcompat.app.AppCompatActivity;

import com.uit.carrental.R;


public class CarDetailActivity extends AppCompatActivity {
    Button btnBook;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.activity_detail_car);
        if (getSupportActionBar() != null) {
            getSupportActionBar().hide();
        }
        overridePendingTransition(R.anim.anim_in_right,R.anim.anim_out_left);

        btnBook =findViewById(R.id.btn_book);
        btnBook.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent it1=new Intent(CarDetailActivity.this, ScheduleSelect.class);
            }
        });
    }

}

```

### Service\Booking\RequestSuccessActivity.java
```java
package com.uit.carrental.Service.Booking;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;

import androidx.appcompat.app.AppCompatActivity;

import com.uit.carrental.ActivityPages.CustomerMainActivity;
import com.uit.carrental.R;

public class RequestSuccessActivity extends AppCompatActivity {
    private Button btn_home;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (getSupportActionBar() != null) {
            getSupportActionBar().hide();
        }
        setContentView(R.layout.activity_finished);

        init();
        btn_home.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent = new Intent(RequestSuccessActivity.this, CustomerMainActivity.class);
                startActivity(intent);
            }
        });


    }
    private void init()
    {
        btn_home = findViewById(R.id.btn_noti_Home);
    }
}

```

### Service\Booking\ScheduleSelect.java
```java
package com.uit.carrental.Service.Booking;

import android.app.DatePickerDialog;
import android.app.TimePickerDialog;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import com.uit.carrental.Model.Activity;
import com.uit.carrental.R;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageReference;

import org.checkerframework.checker.units.qual.C;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;


public class ScheduleSelect extends AppCompatActivity {
    Button btn_request, btn_back;
    TextView NgayNhan, NgayTra;
    TextView GioNhan, GioTra;
    private DatePickerDialog picker;
    private TimePickerDialog tpicker;
    Intent intent;
    String vehicle_id;
    FirebaseFirestore dtb_Vehicle, dtb_Noti,dtb_update;
    private Activity noti = new Activity();
    String current_user_id;
    StorageReference storageReference;
    FirebaseAuth firebaseAuth;

    //
//    APIService apiService;
//    boolean notify = false;
//    String provideID;
    //


    FirebaseUser user;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (getSupportActionBar() != null) {
            getSupportActionBar().hide();
        }
        setContentView(R.layout.activity_schedule_select);

        intent = getIntent();

        String Vehicle_ID = intent.getStringExtra("vehicle_id");
        vehicle_id = Vehicle_ID;

        storageReference = FirebaseStorage.getInstance().getReference();
        dtb_Vehicle = FirebaseFirestore.getInstance();
        firebaseAuth = FirebaseAuth.getInstance();
        current_user_id = firebaseAuth.getCurrentUser().getUid();
        dtb_Noti = FirebaseFirestore.getInstance();
        dtb_update = FirebaseFirestore.getInstance();

        //
//        user= FirebaseAuth.getInstance().getCurrentUser();
//        apiService= Client.getClient("http:/fcm.googleapis.com/").create(APIService.class);
        //

        initComponents();

        overridePendingTransition(R.anim.anim_in_left, R.anim.anim_out_right);


        btn_request.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
//                notify=true;
                setNotiFirebase();
                Intent Writeinfor=new Intent(ScheduleSelect.this, RequestSuccessActivity.class);
                startActivity(Writeinfor);
            }
        });
        btn_back.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                onStop();
            }
        });
    }
    private void setNotiFirebase(){
        dtb_Vehicle.collection("Vehicles")
                .whereEqualTo("vehicle_id", vehicle_id)
                .get()
                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<QuerySnapshot> task) {
                        if (task.isSuccessful()) {
                            for (QueryDocumentSnapshot document : task.getResult()) {
                                noti.setVehicle_id(document.get("vehicle_id").toString());
                                noti.setProvider_id(document.get("provider_id").toString());
                                noti.setPickup(NgayNhan.getText().toString() + " " + GioNhan.getText().toString());
                                noti.setDropoff(NgayTra.getText().toString() + " " + GioTra.getText().toString());
                                noti.setStatus("Dang cho");

                                noti.setCustomer_id(current_user_id);
//                                provideID=noti.getProvider_id();

                                dtb_Noti.collection("Notification")
                                        .add(noti)
                                        .addOnSuccessListener(new OnSuccessListener<DocumentReference>() {
                                            @Override
                                            public void onSuccess(DocumentReference documentReference) {
                                                noti.setNoti_id(documentReference.getId());
                                                Log.e("NotiID", noti.getNoti_id());
                                                updateData(noti.getNoti_id());
                                                Intent intent = new Intent(ScheduleSelect.this, RequestSuccessActivity.class);
                                                startActivity(intent);
/*
                                                toast("Thêm noti thành công");
*/
                                            }
                                        })
                                        .addOnFailureListener(new OnFailureListener() {
                                            @Override
                                            public void onFailure(@NonNull Exception e) {
                                                toast("Thêm noti thất bại");
                                            }
                                        });

                            }
                        } else {
                            Toast.makeText(ScheduleSelect.this, "Không thể lấy thông báo", Toast.LENGTH_SHORT).show();
                        }


                    }
                    private void updateData(String NotiID) {
                        Log.e("NotificationID", NotiID);
                        Map<String, Object> data = new HashMap<>();
                        data.put("noti_id", NotiID);

                        dtb_update.collection("Notification")
                                .document(NotiID)
                                .update(data)
                                .addOnSuccessListener(new OnSuccessListener<Void>() {
                                    @Override
                                    public void onSuccess(Void aVoid) {
/*
                                        Toast.makeText(ScheduleSelect.this, "DocumentSnapshot successfully updated!", Toast.LENGTH_LONG).show();
*/
                                    }
                                })
                                .addOnFailureListener(new OnFailureListener() {
                                    @Override
                                    public void onFailure(@NonNull Exception e) {
                                        Toast.makeText(ScheduleSelect.this, "Error updating document", Toast.LENGTH_LONG).show();
                                    }
                                });
                    }
                });
    }
    private void toast(String txt){
        Toast toast = Toast.makeText(getApplicationContext(),txt,Toast.LENGTH_LONG);
        toast.show();
    }
    private void setonclick(){
        NgayNhan.setFocusable(false);
        NgayNhan.setClickable(true);
        NgayTra.setFocusable(false);
        NgayTra.setClickable(true);
        GioNhan.setFocusable(false);
        GioNhan.setClickable(true);
        GioTra.setFocusable(false);
        GioTra.setClickable(true);

        final Calendar calendar = Calendar.getInstance();

        NgayNhan.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                int year = calendar.get(Calendar.YEAR);
                int month = calendar.get(Calendar.MONTH);
                int day = calendar.get(Calendar.DAY_OF_MONTH);
                picker = new DatePickerDialog(ScheduleSelect.this, new DatePickerDialog.OnDateSetListener() {
                    @Override
                    public void onDateSet(DatePicker view, int year1, int month1, int dayOfMonth) {
                        String formattedDate = String.format("%04d-%02d-%02d", year1, month1 + 1, dayOfMonth);
                        NgayNhan.setText(formattedDate);
                    }
                }, year, month, day);
                picker.show();
            }
        });

        NgayTra.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                int year = calendar.get(Calendar.YEAR);
                int month = calendar.get(Calendar.MONTH);
                int day = calendar.get(Calendar.DAY_OF_MONTH);
                picker = new DatePickerDialog(ScheduleSelect.this, new DatePickerDialog.OnDateSetListener() {
                    @Override
                    public void onDateSet(DatePicker view, int year1, int month1, int dayOfMonth) {
                        String formattedDate = String.format("%04d-%02d-%02d", year1, month1 + 1, dayOfMonth);
                        NgayTra.setText(formattedDate);
                    }
                }, year, month, day);
                picker.show();
            }
        });

        GioNhan.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                int hour = calendar.get(Calendar.HOUR_OF_DAY);
                int minute = calendar.get(Calendar.MINUTE);

                tpicker = new TimePickerDialog(ScheduleSelect.this, new TimePickerDialog.OnTimeSetListener() {
                    @Override
                    public void onTimeSet(TimePicker view, int hourOfDay, int minute) {
                        String formattedTime = String.format("%02d:%02d", hourOfDay, minute);
                        GioNhan.setText(formattedTime);
                    }
                }, hour, minute, true);
                tpicker.show();
            }
        });

        GioTra.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                int hour = calendar.get(Calendar.HOUR_OF_DAY);
                int minute = calendar.get(Calendar.MINUTE);

                tpicker = new TimePickerDialog(ScheduleSelect.this, new TimePickerDialog.OnTimeSetListener() {
                    @Override
                    public void onTimeSet(TimePicker view, int hourOfDay, int minute) {
                        String formattedTime = String.format("%02d:%02d", hourOfDay, minute);
                        GioTra.setText(formattedTime);
                    }
                }, hour, minute, true);
                tpicker.show();
            }
        });
    }

    private void initComponents(){
        btn_request = findViewById(R.id.btn_requestbooking);
        btn_back = findViewById(R.id.btn_noti_back);
        NgayNhan = findViewById(R.id.edt_NgayNhan);
        NgayTra = findViewById(R.id.edt_NgayTra);
        GioNhan= findViewById(R.id.edt_GioNhan);
        GioTra= findViewById(R.id.edt_GioTra);
        setonclick();
    }

}

```

### Service\UserAuthentication\CCCDActivity.java
```java
package com.uit.carrental.Service.UserAuthentication;

import androidx.activity.result.ActivityResultCallback;
import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.app.ProgressDialog;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.Toast;

import com.uit.carrental.Model.User;
import com.uit.carrental.R;
import com.uit.carrental.Service.Api.CloudinaryApi;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.firestore.FirebaseFirestore;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

public class CCCDActivity extends AppCompatActivity {
    private ImageView backButton;
    private FrameLayout frontContainer, behindContainer;
    private ImageView front, behind;
    private String uploadtype, frontUrl, behindUrl;
    private Uri frontURI, behindURI;
    private Button btnUpdate;
    private FirebaseFirestore dtb_user;
    private FirebaseUser firebaseUser;
    private User user = new User();
    private ProgressDialog progressDialog;

    ActivityResultLauncher<String> pickImagesFromGallery = registerForActivityResult(
            new ActivityResultContracts.GetContent(),
            new ActivityResultCallback<Uri>() {
                @Override
                public void onActivityResult(Uri result) {
                    if (result != null) {
                        if (uploadtype.equals("IDCards/Front/")) {
                            frontURI = result;
                            front.setImageURI(result);
                        } else if (uploadtype.equals("IDCards/Behind/")) {
                            behindURI = result;
                            behind.setImageURI(result);
                        }
                    }
                }
            });

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_cccd);
        init();

        backButton.setOnClickListener(v -> {
            Intent intent = new Intent(CCCDActivity.this, ProfileManagement.class);
            startActivity(intent);
            overridePendingTransition(0, 0);
            finish();
        });

        frontContainer.setOnClickListener(v -> {
            uploadtype = "IDCards/Front/";
            pickImagesFromGallery.launch("image/*");
        });

        behindContainer.setOnClickListener(v -> {
            uploadtype = "IDCards/Behind/";
            pickImagesFromGallery.launch("image/*");
        });

        btnUpdate.setOnClickListener(v -> saveImageInFirestore());
    }

    private void init() {
        front = findViewById(R.id.img_front_CCCD);
        behind = findViewById(R.id.img_behind_CCCD);
        frontContainer = findViewById(R.id.front_cccd_container);
        behindContainer = findViewById(R.id.behind_cccd_container);
        btnUpdate = findViewById(R.id.update_img);
        backButton = findViewById(R.id.back_button);

        try {
            dtb_user = FirebaseFirestore.getInstance();
            firebaseUser = FirebaseAuth.getInstance().getCurrentUser();
            if (firebaseUser != null) {
                user.setUser_id(firebaseUser.getUid());
            } else {
                Toast.makeText(this, "Người dùng chưa đăng nhập", Toast.LENGTH_LONG).show();
            }
        } catch (Exception e) {
            Toast.makeText(this, "Lỗi khởi tạo Firebase: " + e.getMessage(), Toast.LENGTH_LONG).show();
            dtb_user = null;
        }

        // Khởi tạo CloudinaryApi
        CloudinaryApi.init(this);
    }

    private void uploadImage(Uri uri, OnUploadCompleteListener listener) {
        if (uri == null) {
            Toast.makeText(this, "Vui lòng chọn ảnh", Toast.LENGTH_SHORT).show();
            listener.onComplete(null);
            return;
        }

        CloudinaryApi.uploadImage(this, uri, new CloudinaryApi.UploadCallbackCustom() {
            @Override
            public void onSuccess(String url) {
                listener.onComplete(url);
            }

            @Override
            public void onFailure(Exception e) {
                Toast.makeText(CCCDActivity.this, "Lỗi tải ảnh: " + e.getMessage(), Toast.LENGTH_LONG).show();
                listener.onComplete(null);
            }
        });
    }

    private void saveImageInFirestore() {
        if (dtb_user == null) {
            Toast.makeText(this, "Lỗi Firebase Firestore, không thể lưu ảnh", Toast.LENGTH_LONG).show();
            return;
        }

        if (frontURI == null && behindURI == null) {
            Toast.makeText(this, "Vui lòng chọn ít nhất một ảnh CCCD", Toast.LENGTH_LONG).show();
            return;
        }

        progressDialog = ProgressDialog.show(this, "Uploading Images", "Please wait...", true);

        // Đếm số ảnh cần upload
        AtomicInteger pendingUploads = new AtomicInteger((frontURI != null ? 1 : 0) + (behindURI != null ? 1 : 0));
        Map<String, Object> data = new HashMap<>();

        if (frontURI != null) {
            uploadImage(frontURI, url -> {
                frontUrl = url;
                if (frontUrl != null) {
                    user.setCiCardFront(frontUrl);
                    data.put("ciCardFront", user.getCiCardFront());
                }
                if (pendingUploads.decrementAndGet() == 0) {
                    saveToFirestore(data);
                }
            });
        }

        if (behindURI != null) {
            uploadImage(behindURI, url -> {
                behindUrl = url;
                if (behindUrl != null) {
                    user.setCiCardBehind(behindUrl);
                    data.put("ciCardBehind", user.getCiCardBehind());
                }
                if (pendingUploads.decrementAndGet() == 0) {
                    saveToFirestore(data);
                }
            });
        }
    }

    private void saveToFirestore(Map<String, Object> data) {
        if (data.isEmpty()) {
            if (progressDialog != null) progressDialog.dismiss();
            Toast.makeText(this, "Không có ảnh nào được upload thành công", Toast.LENGTH_LONG).show();
            return;
        }

        dtb_user.collection("Users").document(firebaseUser.getUid())
                .update(data)
                .addOnCompleteListener(task -> {
                    if (progressDialog != null) progressDialog.dismiss();
                    if (task.isSuccessful()) {
                        Intent intent = new Intent(CCCDActivity.this, ProfileManagement.class);
                        startActivity(intent);
                        overridePendingTransition(0, 0);
                        finish();
                    } else {
                        Toast.makeText(this, "Error updating document", Toast.LENGTH_LONG).show();
                    }
                });
    }

    private interface OnUploadCompleteListener {
        void onComplete(String url);
    }
}
```

### Service\UserAuthentication\ForgotPasswordActivity.java
```java
package com.uit.carrental.Service.UserAuthentication;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.app.ProgressDialog;
import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

import com.uit.carrental.R;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;

public class ForgotPasswordActivity extends AppCompatActivity {

    private EditText inputEmail;
    private Button btnContinue;
    private FirebaseAuth mAuth;
    private ProgressDialog progressDialog;
    private static final String TAG = "ForgotPasswordActivity";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_forgot_password);

        initViews();

        Intent intent = getIntent();
        String emailFromIntent = intent.getStringExtra("email");
        if (emailFromIntent != null) {
            inputEmail.setText(emailFromIntent);
        }

        btnContinue.setOnClickListener(view -> sendResetPasswordEmail());
    }

    private void initViews() {
        inputEmail = findViewById(R.id.input_email);
        btnContinue = findViewById(R.id.btn_continue);
        mAuth = FirebaseAuth.getInstance();
        progressDialog = new ProgressDialog(this);
    }

    private void sendResetPasswordEmail() {
        String email = inputEmail.getText().toString().trim();

        if (TextUtils.isEmpty(email)) {
            inputEmail.setError("Vui lòng nhập email.");
            return;
        }

        progressDialog.setMessage("Đang gửi email khôi phục...");
        progressDialog.show();

        mAuth.sendPasswordResetEmail(email)
                .addOnCompleteListener(task -> {
                    progressDialog.dismiss();
                    if (task.isSuccessful()) {
                        Toast.makeText(this, "Đã gửi email xác nhận tới " + email, Toast.LENGTH_LONG).show();
                        finish();
                    } else {
                        Log.e(TAG, "sendPasswordResetEmail thất bại: " + task.getException());
                        Toast.makeText(this, "Không thể gửi email xác nhận.", Toast.LENGTH_SHORT).show();
                    }
                });
    }
}

```

### Service\UserAuthentication\GGVerrifyPhone.java
```java
package com.uit.carrental.Service.UserAuthentication;

import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;

import com.uit.carrental.R;

public class GGVerrifyPhone extends AppCompatActivity {

    private Button btnContinue;
    private EditText inputPhone;

    private void init()
    {
        btnContinue = findViewById(R.id.btn_continue);
        inputPhone = findViewById(R.id.input_phone_number);
    }
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_ggverrify_phone);

        init();

        btnContinue.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(GGVerrifyPhone.this, ValidatePhoneActivity.class);
                intent.putExtra("phone", inputPhone.getText().toString());
                startActivity(intent);
            }
        });
    }
}
```

### Service\UserAuthentication\LoginActivity.java
```java
package com.uit.carrental.Service.UserAuthentication;

import android.app.ProgressDialog;
import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.LinearLayout;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import com.google.android.gms.auth.api.signin.GoogleSignIn;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.GoogleSignInClient;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.common.api.ApiException;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.AuthCredential;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.auth.GoogleAuthProvider;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;
import com.uit.carrental.ActivityPages.CustomerMainActivity;
import com.uit.carrental.ActivityPages.OwnerMainActivity;
import com.uit.carrental.Model.User;
import com.uit.carrental.Model.UserClient;
import com.uit.carrental.R;

public class LoginActivity extends AppCompatActivity {

    private EditText inputEmail, inputPassword;
    private Button btnSignIn, btnSignUp;
    private TextView btnForgot;
    private LinearLayout btnGG, btnFacebook; // Đổi từ Button sang LinearLayout
    private ProgressDialog progressDialog;
    private FirebaseAuth mAuth;
    private GoogleSignInClient mGoogleSignInClient;
    private static final int RC_SIGN_IN = 406;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_sign_in);

        initViews();
        configureGoogleSignIn();

        btnSignIn.setOnClickListener(view -> loginWithEmail());
        btnGG.setOnClickListener(view -> loginWithGoogle());
        btnSignUp.setOnClickListener(view -> {
            Intent intent = new Intent(LoginActivity.this, RegisterActivity.class);
            startActivity(intent);
        });
        btnForgot.setOnClickListener(view -> {
            Intent intent = new Intent(LoginActivity.this, ForgotPasswordActivity.class);
            startActivity(intent);
        });
        btnFacebook.setOnClickListener(view -> {
            Toast.makeText(this, "Đăng nhập với Facebook chưa được triển khai.", Toast.LENGTH_SHORT).show();
            // TODO: Implement Facebook login logic (e.g., using Facebook SDK and Firebase)
        });
    }

    private void initViews() {
        mAuth = FirebaseAuth.getInstance();
        progressDialog = new ProgressDialog(this);

        inputEmail = findViewById(R.id.email);
        inputPassword = findViewById(R.id.password);
        btnSignIn = findViewById(R.id.btnSignIn); // Cập nhật ID
        btnSignUp = findViewById(R.id.btnSignUp); // Cập nhật ID
        btnForgot = findViewById(R.id.btnForgot); // Cập nhật ID
        btnGG = findViewById(R.id.btn_GGsignIn);
        btnFacebook = findViewById(R.id.btn_facebook_signIn);
    }

    private void configureGoogleSignIn() {
        GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
                .requestIdToken(getString(R.string.default_web_client_id))
                .requestEmail()
                .build();
        mGoogleSignInClient = GoogleSignIn.getClient(this, gso);
    }

    private void loginWithEmail() {
        String email = inputEmail.getText().toString().trim();
        String password = inputPassword.getText().toString().trim();

        if (!validateForm(email, password)) return;

        progressDialog.setMessage("Đang đăng nhập...");
        progressDialog.show();

        mAuth.signInWithEmailAndPassword(email, password)
                .addOnCompleteListener(task -> {
                    progressDialog.dismiss();
                    if (task.isSuccessful()) {
                        fetchUserData();
                    } else {
                        Toast.makeText(this, "Đăng nhập thất bại.", Toast.LENGTH_SHORT).show();
                    }
                });
    }

    private void loginWithGoogle() {
        Intent signInIntent = mGoogleSignInClient.getSignInIntent();
        startActivityForResult(signInIntent, RC_SIGN_IN);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == RC_SIGN_IN) {
            Task<GoogleSignInAccount> task = GoogleSignIn.getSignedInAccountFromIntent(data);
            try {
                GoogleSignInAccount account = task.getResult(ApiException.class);
                firebaseAuthWithGoogle(account);
            } catch (ApiException e) {
                Toast.makeText(this, "Đăng nhập Google thất bại.", Toast.LENGTH_SHORT).show();
            }
        }
    }

    private void firebaseAuthWithGoogle(GoogleSignInAccount acct) {
        AuthCredential credential = GoogleAuthProvider.getCredential(acct.getIdToken(), null);
        mAuth.signInWithCredential(credential)
                .addOnCompleteListener(task -> {
                    if (task.isSuccessful()) {
                        fetchUserData();
                    } else {
                        Toast.makeText(this, "Đăng nhập Google thất bại.", Toast.LENGTH_SHORT).show();
                    }
                });
    }

    private void fetchUserData() {
        FirebaseUser firebaseUser = mAuth.getCurrentUser();
        if (firebaseUser == null) return;

        if (!firebaseUser.isEmailVerified()) {
            Toast.makeText(this, "Vui lòng xác nhận email trước khi đăng nhập.", Toast.LENGTH_LONG).show();
            mAuth.signOut();
            return;
        }

        String uid = firebaseUser.getUid();
        FirebaseFirestore db = FirebaseFirestore.getInstance();
        DocumentReference userRef = db.collection("Users").document(uid);

        userRef.get().addOnCompleteListener(task -> {
            if (task.isSuccessful()) {
                DocumentSnapshot document = task.getResult();
                if (document.exists()) {
                    User user = document.toObject(User.class);
                    ((UserClient) getApplicationContext()).setUser(user);
                    navigateToMain(user);
                } else {
                    createNewUser(uid);
                }
            } else {
                Toast.makeText(this, "Không thể lấy thông tin người dùng.", Toast.LENGTH_SHORT).show();
            }
        });
    }

    private void createNewUser(String uid) {
        FirebaseFirestore db = FirebaseFirestore.getInstance();
        User user = new User();
        user.setUser_id(uid);
        user.setUsername("");
        user.setEmail("");
        user.setRole("customer");

        db.collection("Users").document(uid).set(user)
                .addOnSuccessListener(aVoid -> {
                    ((UserClient) getApplicationContext()).setUser(user);
                    navigateToMain(user);
                })
                .addOnFailureListener(e -> {
                    Toast.makeText(this, "Không thể tạo tài khoản người dùng mới.", Toast.LENGTH_SHORT).show();
                });
    }

    private void navigateToMain(User user) {
        if (user.getUsername() == null || user.getUsername().isEmpty() ||
                user.getPhoneNumber() == null || user.getPhoneNumber().isEmpty()) {
            Intent intent = new Intent(this, ProfileManagement.class);
            startActivity(intent);
        } else {
            if (user.getCurrentRole() != null) {
                if (user.getCurrentRole().equalsIgnoreCase("customer")) {
                    startActivity(new Intent(this, CustomerMainActivity.class));
                } else if (user.getCurrentRole().equalsIgnoreCase("owner")) {
                    startActivity(new Intent(this, OwnerMainActivity.class));
                } else {
                    Toast.makeText(this, "Vai trò không xác định.", Toast.LENGTH_SHORT).show();
                }
            } else {
                Toast.makeText(this, "Không tìm thấy vai trò hiện tại.", Toast.LENGTH_SHORT).show();
            }
        }
        finish();
    }

    private boolean validateForm(String email, String password) {
        boolean valid = true;
        if (TextUtils.isEmpty(email)) {
            inputEmail.setError("Email bắt buộc.");
            valid = false;
        }
        if (TextUtils.isEmpty(password)) {
            inputPassword.setError("Mật khẩu bắt buộc.");
            valid = false;
        }
        return valid;
    }
}
```

### Service\UserAuthentication\ProfileManagement.java
```java
package com.uit.carrental.Service.UserAuthentication;

import androidx.activity.result.ActivityResultCallback;
import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.app.AlertDialog;
import android.app.DatePickerDialog;
import android.app.ProgressDialog;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.squareup.picasso.Picasso;
import com.uit.carrental.Model.User;
import com.uit.carrental.R;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.OnProgressListener;
import com.google.firebase.storage.StorageReference;
import com.google.firebase.storage.UploadTask;

import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import de.hdodenhof.circleimageview.CircleImageView;

public class ProfileManagement extends AppCompatActivity {
    private DatePickerDialog datePickerDialog;
    private Button dateButton, btnUpdate;
    private Uri mImageURI;
    private CircleImageView imgAvatar;
    private ImageView backButton, editAvatar;
    private String imageID;
    private String documentId, downloadUrl, uploadtype;
    private FirebaseUser firebaseUser;
    private FirebaseFirestore dtb_user;
    private EditText phonenumber, email, fullname, address, city;
    private TextView emailDisplay, updateCccd;
    private User user = new User();

    private static final String MOCK_AVATAR = "https://media4.giphy.com/media/v1.Y2lkPTZjMDliOTUyd2owNnAxcXR5YmJhMmh3ZDlvY3hoOXFhaWN2aXY3cm1tMXkwMnBlNyZlcD12MV9naWZzX3NlYXJjaCZjdD1n/FY8c5SKwiNf1EtZKGs/giphy_s.gif";

    ActivityResultLauncher<String> AvatarpickImagesFromGallery = registerForActivityResult(
            new ActivityResultContracts.GetContent(),
            new ActivityResultCallback<Uri>() {
                @Override
                public void onActivityResult(Uri result) {
                    if (result != null) {
                        mImageURI = result;
                        imgAvatar.setImageURI(result);
                        uploadImage(uploadtype);
                    }
                }
            });

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_profile);
        init();
        if (dtb_user != null) {
            getinfo();
        } else {
            Toast.makeText(this, "Lỗi khởi tạo Firebase Firestore", Toast.LENGTH_LONG).show();
        }

        backButton.setOnClickListener(v -> {
            Intent intent = new Intent(ProfileManagement.this, UserProfile.class);
            startActivity(intent);
            overridePendingTransition(0, 0);
            finish();
        });

        btnUpdate.setOnClickListener(v -> updateinfo());

        imgAvatar.setOnClickListener(v -> {
            uploadtype = "UsersAvatar/";
            AvatarpickImagesFromGallery.launch("image/*");
        });

        editAvatar.setOnClickListener(v -> {
            uploadtype = "UsersAvatar/";
            AvatarpickImagesFromGallery.launch("image/*");
        });

        dateButton.setOnClickListener(v -> openDatePicker(v));

        updateCccd.setOnClickListener(v -> {
            Intent intent = new Intent(ProfileManagement.this, CCCDActivity.class);
            startActivity(intent);
            overridePendingTransition(0, 0);
        });
    }

    private void init() {
        phonenumber = findViewById(R.id.profile_input_phone);
        email = findViewById(R.id.profile_input_email);
        phonenumber.setEnabled(false);
        email.setEnabled(false);

        fullname = findViewById(R.id.profile_input_fullname);
        address = findViewById(R.id.profile_input_address);
        city = findViewById(R.id.profile_input_city);
        btnUpdate = findViewById(R.id.btn_update);
        imgAvatar = findViewById(R.id.img_avatar_profile_input_fragment);
        backButton = findViewById(R.id.back_button);
        editAvatar = findViewById(R.id.edit_avatar);
        emailDisplay = findViewById(R.id.email_display);
        updateCccd = findViewById(R.id.update_cccd);

        try {
            dtb_user = FirebaseFirestore.getInstance();
            firebaseUser = FirebaseAuth.getInstance().getCurrentUser();
            if (firebaseUser != null) {
                user.setUser_id(firebaseUser.getUid());
            } else {
                Toast.makeText(this, "Người dùng chưa đăng nhập", Toast.LENGTH_LONG).show();
            }
        } catch (Exception e) {
            Toast.makeText(this, "Lỗi khởi tạo Firebase: " + e.getMessage(), Toast.LENGTH_LONG).show();
            dtb_user = null;
        }

        initDatePicker();
        dateButton = findViewById(R.id.profile_input_dateofbirth);
        dateButton.setText(getTodaysDate());
    }

    private String getTodaysDate() {
        Calendar cal = Calendar.getInstance();
        int year = cal.get(Calendar.YEAR);
        int month = cal.get(Calendar.MONTH) + 1;
        int day = cal.get(Calendar.DAY_OF_MONTH);
        return makeDateString(day, month, year);
    }

    private String makeDateString(int day, int month, int year) {
        return String.format("%02d/%02d/%d", day, month, year);
    }

    public void openDatePicker(View view) {
        datePickerDialog.show();
    }

    private void initDatePicker() {
        DatePickerDialog.OnDateSetListener dateSetListener = (datePicker, year, month, day) -> {
            month = month + 1;
            String date = makeDateString(day, month, year);
            dateButton.setText(date);
        };

        Calendar cal = Calendar.getInstance();
        int year = cal.get(Calendar.YEAR);
        int month = cal.get(Calendar.MONTH);
        int day = cal.get(Calendar.DAY_OF_MONTH);

        int style = AlertDialog.THEME_HOLO_LIGHT;
        datePickerDialog = new DatePickerDialog(this, style, dateSetListener, year, month, day);
    }

    private void uploadImage(String type) {
        FirebaseStorage storage = FirebaseStorage.getInstance();
        StorageReference storageReference = storage.getReference();

        if (mImageURI != null) {
            imageID = UUID.randomUUID().toString();
            final ProgressDialog progressDialog = new ProgressDialog(this);
            progressDialog.setTitle("Uploading...");
            progressDialog.show();

            StorageReference ref = storageReference.child(type + "/" + imageID);
            ref.putFile(mImageURI)
                    .addOnSuccessListener(taskSnapshot -> {
                        progressDialog.dismiss();
                        ref.getDownloadUrl().addOnSuccessListener(uri -> {
                            downloadUrl = uri.toString();
                        });
                    })
                    .addOnFailureListener(e -> {
                        progressDialog.dismiss();
                        Toast.makeText(ProfileManagement.this, "Failed " + e.getMessage(), Toast.LENGTH_SHORT).show();
                    })
                    .addOnProgressListener(taskSnapshot -> {
                        double progress = (100.0 * taskSnapshot.getBytesTransferred() / taskSnapshot.getTotalByteCount());
                        progressDialog.setMessage("Uploaded " + (int) progress + "%");
                    });
        }
    }

    private void updateinfo() {
        user.setUsername(fullname.getText().toString());
        user.setAddress(address.getText().toString());
        user.setCity(city.getText().toString());
        user.setBirthday(dateButton.getText().toString());
        user.setAvatarURL(downloadUrl);
        user.setEmail(email.getText().toString());

        Map<String, Object> data = new HashMap<>();
        data.put("username", user.getUsername());
        data.put("address", user.getAddress());
        data.put("city", user.getCity());
        data.put("birthday", user.getBirthday());
        data.put("email", user.getEmail());

        if (downloadUrl != null) {
            data.put("avatarURL", user.getAvatarURL());
        }

        if (dtb_user == null) {
            Toast.makeText(this, "Lỗi Firebase Firestore, không thể cập nhật", Toast.LENGTH_LONG).show();
            return;
        }

        new Thread(() -> {
            dtb_user.collection("Users").document(user.getUser_id())
                    .update(data)
                    .addOnSuccessListener(aVoid -> {
                        runOnUiThread(() -> {
                            Intent intent = new Intent(ProfileManagement.this, UserProfile.class);
                            startActivity(intent);
                            overridePendingTransition(0, 0);
                            finish();
                        });
                    })
                    .addOnFailureListener(e -> {
                        runOnUiThread(() -> {
                            Toast.makeText(ProfileManagement.this, "Error updating document", Toast.LENGTH_LONG).show();
                        });
                    });
        }).start();
    }

    private void getinfo() {
        if (dtb_user == null) {
            Toast.makeText(this, "Lỗi Firebase Firestore, không thể lấy thông tin", Toast.LENGTH_LONG).show();
            return;
        }

        new Thread(() -> {
            dtb_user.collection("Users")
                    .whereEqualTo("user_id", user.getUser_id())
                    .get()
                    .addOnCompleteListener(task -> {
                        runOnUiThread(() -> {
                            if (task.isSuccessful()) {
                                for (QueryDocumentSnapshot document : task.getResult()) {
                                    fullname.setText(document.getString("username"));
                                    email.setText(document.getString("email"));
                                    phonenumber.setText(document.getString("phoneNumber"));
                                    address.setText(document.getString("address"));
                                    city.setText(document.getString("city"));
                                    dateButton.setText(document.getString("birthday"));
                                    emailDisplay.setText(document.getString("email"));

                                    user.setAvatarURL(document.getString("avatarURL"));
                                    if (user.getAvatarURL() != null && !user.getAvatarURL().isEmpty()) {
                                        Picasso.get().load(user.getAvatarURL()).into(imgAvatar);
                                    } else {
                                        user.setAvatarURL("");
                                        Picasso.get().load(MOCK_AVATAR).into(imgAvatar);
                                    }
                                }
                            } else {
                                Toast.makeText(ProfileManagement.this, "Không thể lấy thông tin", Toast.LENGTH_LONG).show();
                                Picasso.get().load(MOCK_AVATAR).into(imgAvatar);
                            }
                            if (email.getText().toString().isEmpty()) email.setEnabled(true);
                        });
                    });
        }).start();
    }
}
```

### Service\UserAuthentication\RegisterActivity.java
```java
package com.uit.carrental.Service.UserAuthentication;

import android.app.ProgressDialog;
import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import com.google.android.gms.auth.api.signin.GoogleSignIn;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.GoogleSignInClient;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.common.api.ApiException;
import com.google.android.gms.tasks.Task;
import com.google.android.material.snackbar.Snackbar;
import com.google.firebase.FirebaseApp;
import com.google.firebase.auth.AuthCredential;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseAuthException;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.auth.GoogleAuthProvider;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.FirebaseFirestoreSettings;
import com.uit.carrental.Model.User;
import com.uit.carrental.R;

import java.util.HashMap;
import java.util.Map;

public class RegisterActivity extends AppCompatActivity {

    private static final String TAG = "RegisterActivity";
    private static final int RC_SIGN_IN = 406; // Khớp với LoginActivity

    private EditText inputUsername, inputPhone, inputEmail, inputPass, inputConfirmPass;
    private Button btnSignUp;
    private LinearLayout btnFacebook, btnGoogle;
    private FirebaseAuth mAuth;
    private FirebaseFirestore dtbUser;
    private GoogleSignInClient mGoogleSignInClient;
    private ProgressDialog progressDialog;
    private String username, phone, email, password, confirmPassword;
    private boolean isValid = true;
    private User user;

    private void initViews() {
        inputUsername = findViewById(R.id.username_input);
        inputPhone = findViewById(R.id.phone_input);
        inputEmail = findViewById(R.id.email_input);
        inputPass = findViewById(R.id.password_input);
        inputConfirmPass = findViewById(R.id.confirm_password_input);
        btnSignUp = findViewById(R.id.btn_signUp2);
        btnFacebook = findViewById(R.id.facebook_button);
        btnGoogle = findViewById(R.id.google_button);
    }

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_register);

        FirebaseApp.initializeApp(this);
        initViews();

        mAuth = FirebaseAuth.getInstance();
        dtbUser = FirebaseFirestore.getInstance();
        progressDialog = new ProgressDialog(this);
        configureGoogleSignIn();

        btnSignUp.setOnClickListener(view -> {
            checkPassword();
            if (isValid) {
                createAccount();
            }
        });

        btnFacebook.setOnClickListener(view -> {
            Toast.makeText(this, "Đăng nhập với Facebook chưa được triển khai.", Toast.LENGTH_SHORT).show();
            // TODO: Implement Facebook login logic
        });

        btnGoogle.setOnClickListener(view -> loginWithGoogle());
    }

    private void configureGoogleSignIn() {
        GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
                .requestIdToken(getString(R.string.default_web_client_id))
                .requestEmail()
                .build();
        mGoogleSignInClient = GoogleSignIn.getClient(this, gso);
    }

    private void checkPassword() {
        password = inputPass.getText().toString().trim();
        confirmPassword = inputConfirmPass.getText().toString().trim();
        if (TextUtils.isEmpty(password)) {
            inputPass.setError("Vui lòng nhập mật khẩu");
            inputPass.requestFocus();
            isValid = false;
        } else if (!password.equals(confirmPassword)) {
            inputConfirmPass.setError("Mật khẩu không khớp");
            inputConfirmPass.requestFocus();
            isValid = false;
        } else {
            isValid = true;
        }
    }

    private void createAccount() {
        username = inputUsername.getText().toString().trim();
        phone = inputPhone.getText().toString().trim();
        email = inputEmail.getText().toString().trim();
        password = inputPass.getText().toString().trim();

        if (!validateForm()) return;

        progressDialog.setMessage("Đang tạo tài khoản...");
        progressDialog.show();

        mAuth.createUserWithEmailAndPassword(email, password)
                .addOnCompleteListener(task -> {
                    if (task.isSuccessful()) {
                        sendVerificationEmail();
                    } else {
                        progressDialog.dismiss();
                        String errorMessage = "Không thể tạo tài khoản.";
                        if (task.getException() instanceof FirebaseAuthException) {
                            FirebaseAuthException e = (FirebaseAuthException) task.getException();
                            switch (e.getErrorCode()) {
                                case "ERROR_EMAIL_ALREADY_IN_USE":
                                    errorMessage = "Email đã được sử dụng.";
                                    inputEmail.setError(errorMessage);
                                    inputEmail.requestFocus();
                                    break;
                                case "ERROR_INVALID_EMAIL":
                                    errorMessage = "Email không hợp lệ.";
                                    inputEmail.setError(errorMessage);
                                    inputEmail.requestFocus();
                                    break;
                                case "ERROR_WEAK_PASSWORD":
                                    errorMessage = "Mật khẩu quá yếu (ít nhất 6 ký tự).";
                                    inputPass.setError(errorMessage);
                                    inputPass.requestFocus();
                                    break;
                                default:
                                    errorMessage = e.getMessage();
                            }
                        }
                        Toast.makeText(RegisterActivity.this, errorMessage, Toast.LENGTH_SHORT).show();
                    }
                });
    }

    private void sendVerificationEmail() {
        FirebaseUser firebaseUser = mAuth.getCurrentUser();
        if (firebaseUser != null) {
            firebaseUser.sendEmailVerification()
                    .addOnCompleteListener(task -> {
                        if (task.isSuccessful()) {
                            Toast.makeText(this, "Đã gửi email xác thực đến " + email, Toast.LENGTH_LONG).show();
                            createUserDocument();
                        } else {
                            progressDialog.dismiss();
                            Toast.makeText(this, "Gửi email xác thực thất bại: " + task.getException().getMessage(), Toast.LENGTH_SHORT).show();
                        }
                    });
        }
    }

    private void createUserDocument() {
        user = new User();
        user.setUsername(username);
        user.setEmail(email);
        user.setPhoneNumber(phone);
        user.setUser_id(FirebaseAuth.getInstance().getUid());

        Map<String, Boolean> roleMap = new HashMap<>();
        roleMap.put("customer", true);
        roleMap.put("owner", true);

        user.setRoles(roleMap);
        user.setCurrentRole("customer"); // Mặc định ban đầu là customer

        FirebaseFirestoreSettings settings = new FirebaseFirestoreSettings.Builder()
                .build();
        dtbUser.setFirestoreSettings(settings);

        DocumentReference newUserRef = dtbUser.collection("Users")
                .document(FirebaseAuth.getInstance().getUid());

        newUserRef.set(user).addOnCompleteListener(task -> {
            progressDialog.dismiss();
            if (task.isSuccessful()) {
                Toast.makeText(this, "Đăng ký thành công. Vui lòng xác thực Email trước khi đăng nhập.", Toast.LENGTH_LONG).show();
                finish();
            } else {
                View parentLayout = findViewById(android.R.id.content);
                Snackbar.make(parentLayout, "Tạo tài liệu người dùng thất bại: " + task.getException().getMessage(), Snackbar.LENGTH_SHORT).show();
            }
        });
    }

    private boolean validateForm() {
        boolean valid = true;
        if (TextUtils.isEmpty(username)) {
            inputUsername.setError("Tên đăng nhập bắt buộc.");
            inputUsername.requestFocus();
            valid = false;
        }
        if (TextUtils.isEmpty(phone)) {
            inputPhone.setError("Số điện thoại bắt buộc.");
            inputPhone.requestFocus();
            valid = false;
        }
        if (TextUtils.isEmpty(email)) {
            inputEmail.setError("Email bắt buộc.");
            inputEmail.requestFocus();
            valid = false;
        }
        if (TextUtils.isEmpty(password)) {
            inputPass.setError("Mật khẩu bắt buộc.");
            inputPass.requestFocus();
            valid = false;
        }
        return valid;
    }

    private void loginWithGoogle() {
        Intent signInIntent = mGoogleSignInClient.getSignInIntent();
        startActivityForResult(signInIntent, RC_SIGN_IN);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == RC_SIGN_IN) {
            Task<GoogleSignInAccount> task = GoogleSignIn.getSignedInAccountFromIntent(data);
            try {
                GoogleSignInAccount account = task.getResult(ApiException.class);
                firebaseAuthWithGoogle(account);
            } catch (ApiException e) {
                Toast.makeText(this, "Đăng nhập Google thất bại: " + e.getMessage(), Toast.LENGTH_SHORT).show();
            }
        }
    }

    private void firebaseAuthWithGoogle(GoogleSignInAccount acct) {
        AuthCredential credential = GoogleAuthProvider.getCredential(acct.getIdToken(), null);
        mAuth.signInWithCredential(credential)
                .addOnCompleteListener(task -> {
                    if (task.isSuccessful()) {
                        // Lưu thông tin người dùng với username và phone mặc định trống
                        username = acct.getDisplayName() != null ? acct.getDisplayName() : "";
                        email = acct.getEmail();
                        phone = "";
                        createUserDocument();
                    } else {
                        Toast.makeText(this, "Đăng nhập Google thất bại: " + task.getException().getMessage(), Toast.LENGTH_SHORT).show();
                    }
                });
    }
}
```

### Service\UserAuthentication\UpdatePassword.java
```java
package com.uit.carrental.Service.UserAuthentication;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

import com.uit.carrental.R;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.AuthCredential;
import com.google.firebase.auth.EmailAuthProvider;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;

public class UpdatePassword extends AppCompatActivity {

    private FirebaseUser user;
    private EditText currentPass, newPass, confirmPass;
    private String current, newPassword, confirmNew;
    private Button btnContinue;
    private Boolean isValid = true;

    private void init()
    {
        currentPass = findViewById(R.id.input_password);
        newPass = findViewById(R.id.input_new_password);
        confirmPass = findViewById(R.id.reinput_new_password);
        btnContinue = findViewById(R.id.btn_continue);

        user = FirebaseAuth.getInstance().getCurrentUser();
    }

    private void getPass()
    {
        current = currentPass.getText().toString();
        newPassword = newPass.getText().toString();
        confirmNew = confirmPass.getText().toString();
        checkPassword();
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_update_password);

        init();

        btnContinue.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                getPass();

                AuthCredential credential = EmailAuthProvider.getCredential(user.getEmail(), current);

                if(isValid)
                {
                    user.reauthenticate(credential)
                        .addOnCompleteListener(new OnCompleteListener<Void>() {
                            @Override
                            public void onComplete(@NonNull Task<Void> task) {
                                if (task.isSuccessful()) {
                                    // Mật khẩu hiện tại đã được xác thực thành công
                                    user.updatePassword(newPassword)
                                            .addOnCompleteListener(new OnCompleteListener<Void>() {
                                                @Override
                                                public void onComplete(@NonNull Task<Void> task) {
                                                    if (task.isSuccessful()) {
                                                        Toast.makeText(UpdatePassword.this, "Thay đổi mật khẩu thành công",Toast.LENGTH_LONG).show();
                                                        finish();
                                                    } else {
                                                        Toast.makeText(UpdatePassword.this, "Đã xảy ra lỗi trong quá trình thay đổi mật khẩu",Toast.LENGTH_LONG).show();
                                                    }
                                                }
                                            });
                                } else {
                                    Toast.makeText(UpdatePassword.this, "Mật khẩu hiện tại không chính xác",Toast.LENGTH_LONG).show();
                                }
                            }
                        });
                }
            }
        });
    }

    private void checkPassword() {

        if (!newPassword.equals(confirmNew))
        {
            Toast.makeText(this,"Mật khẩu không khớp, mời nhập lại",Toast.LENGTH_LONG).show();
            newPass.setText("");
            confirmPass.setText("");
            isValid = false;
        }
        else if(newPassword.isEmpty())
        {
            Toast.makeText(this,"Vui lòng nhập mật khẩu",Toast.LENGTH_LONG).show();
            newPass.setText("");
            confirmPass.setText("");
            isValid = false;
        }
    }
}
```

### Service\UserAuthentication\UserProfile.java
```java
package com.uit.carrental.Service.UserAuthentication;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.squareup.picasso.Picasso;
import com.uit.carrental.Model.User;
import com.uit.carrental.R;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;

import de.hdodenhof.circleimageview.CircleImageView;

public class UserProfile extends AppCompatActivity {

    private Button btnUpdate;
    private ImageView backButton, imgFrontCCCD, imgBehindCCCD;
    private CircleImageView imgAvatar;
    private TextView tvPhone, tvEmail, tvName, tvAddress, tvCity, tvBirthday;
    private FirebaseFirestore dtb_user;
    private FirebaseUser firebaseUser;
    private User user = new User();

    private static final String MOCK_CCCD_FRONT = "https://lambangcapgia.info/wp-content/uploads/2021/03/lam-cccd-gia.jpg";
    private static final String MOCK_CCCD_BACK = "https://media.vov.vn/sites/default/files/styles/large/public/2021-10/Can%20cuoc.jpg";
    private static final String MOCK_AVATAR = "https://media4.giphy.com/media/v1.Y2lkPTZjMDliOTUyd2owNnAxcXR5YmJhMmh3ZDlvY3hoOXFhaWN2aXY3cm1tMXkwMnBlNyZlcD12MV9naWZzX3NlYXJjaCZjdD1n/FY8c5SKwiNf1EtZKGs/giphy_s.gif";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_profile_management);

        init();
        getInfo();

        backButton.setOnClickListener(v -> {
            finish();
            overridePendingTransition(0, 0);
        });

        btnUpdate.setOnClickListener(v -> {
            Intent intent = new Intent(UserProfile.this, ProfileManagement.class);
            startActivity(intent);
            overridePendingTransition(0, 0);
        });
    }

    private void init() {
        btnUpdate = findViewById(R.id.btn_update);
        backButton = findViewById(R.id.back_button);
        imgAvatar = findViewById(R.id.img_avatar);
        imgFrontCCCD = findViewById(R.id.img_front_CCCD);
        imgBehindCCCD = findViewById(R.id.img_behind_CCCD);
        tvName = findViewById(R.id.fullname);
        tvEmail = findViewById(R.id.email);
        tvPhone = findViewById(R.id.phone);
        tvAddress = findViewById(R.id.address);
        tvCity = findViewById(R.id.city);
        tvBirthday = findViewById(R.id.birthday);

        dtb_user = FirebaseFirestore.getInstance();
        firebaseUser = FirebaseAuth.getInstance().getCurrentUser();
        user.setUser_id(firebaseUser != null ? firebaseUser.getUid() : "");
    }

    private void getInfo() {
        dtb_user.collection("Users")
                .whereEqualTo("user_id", user.getUser_id())
                .get()
                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<QuerySnapshot> task) {
                        if (task.isSuccessful()) {
                            for (QueryDocumentSnapshot document : task.getResult()) {
                                tvName.setText(document.getString("username"));
                                tvEmail.setText(document.getString("email"));
                                tvPhone.setText(document.getString("phoneNumber"));
                                tvAddress.setText(document.getString("address"));
                                tvCity.setText(document.getString("city"));
                                tvBirthday.setText(document.getString("birthday"));
                                user.setAvatarURL(document.getString("avatarURL"));

                                if (user.getAvatarURL() != null && !user.getAvatarURL().isEmpty()) {
                                    Picasso.get().load(user.getAvatarURL()).into(imgAvatar);
                                } else {
                                    user.setAvatarURL("");
                                    Picasso.get().load(MOCK_AVATAR).into(imgAvatar);
                                }

                                user.setCiCardFront(document.getString("ciCardFront"));
                                if (user.getCiCardFront() != null && !user.getCiCardFront().isEmpty()) {
                                    Picasso.get().load(user.getCiCardFront()).into(imgFrontCCCD);
                                } else {
                                    user.setCiCardFront("");
                                    Picasso.get().load(MOCK_CCCD_FRONT).into(imgFrontCCCD);
                                }

                                user.setCiCardBehind(document.getString("ciCardBehind"));
                                if (user.getCiCardBehind() != null && !user.getCiCardBehind().isEmpty()) {
                                    Picasso.get().load(user.getCiCardBehind()).into(imgBehindCCCD);
                                } else {
                                    user.setCiCardBehind("");
                                    Picasso.get().load(MOCK_CCCD_BACK).into(imgBehindCCCD);
                                }
                            }
                        } else {
                            Toast.makeText(UserProfile.this, "Không thể lấy thông tin", Toast.LENGTH_LONG).show();
                            // Load mockdata khi Firestore thất bại
                            Picasso.get().load(MOCK_AVATAR).into(imgAvatar);
                            Picasso.get().load(MOCK_CCCD_FRONT).into(imgFrontCCCD);
                            Picasso.get().load(MOCK_CCCD_BACK).into(imgBehindCCCD);
                        }
                    }
                });
    }
}
```

### Service\UserAuthentication\ValidatePhoneActivity.java
```java
/**package com.example.carrenting.Service.UserAuthentication;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.example.carrenting.R;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.FirebaseException;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.PhoneAuthCredential;
import com.google.firebase.auth.PhoneAuthOptions;
import com.google.firebase.auth.PhoneAuthProvider;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.FirebaseFirestoreSettings;

import java.util.concurrent.TimeUnit;

public class ValidatePhoneActivity extends AppCompatActivity {

    private EditText otpNumberOne, getOtpNumberTwo, getOtpNumberThree, getOtpNumberFour, getOtpNumberFive, otpNumberSix;
    private Button btnSendCode;
    private TextView tvResend;
    private String mVerificationId;
    PhoneAuthProvider.ForceResendingToken mResendToken;
    String phoneNumber;
    Boolean otpValid = true;
    private FirebaseAuth mAuth;
    FirebaseAuth firebaseAuth;
    private FirebaseFirestore mDb;
    PhoneAuthCredential phoneAuthCredential;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_validate_phone);

        initUI();
        Intent data = getIntent();
        phoneNumber = data.getStringExtra("phone");

        firebaseAuth = FirebaseAuth.getInstance();
        mAuth = FirebaseAuth.getInstance();
        mDb = FirebaseFirestore.getInstance();

        if (phoneNumber.startsWith("0")) {
            phoneNumber = "+84" + phoneNumber.substring(1, phoneNumber.length());
        }
        Log.wtf("Phone Number", "Phone number is : " + phoneNumber);
        btnSendCode.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                validateField(otpNumberOne);
                validateField(getOtpNumberTwo);
                validateField(getOtpNumberThree);
                validateField(getOtpNumberFour);
                validateField(getOtpNumberFive);
                validateField(otpNumberSix);

                if(otpValid) {
                    // send otp to the user
                    String otp = otpNumberOne.getText().toString() + getOtpNumberTwo.getText().toString() + getOtpNumberThree.getText().toString() + getOtpNumberFour.getText().toString() + getOtpNumberFive.getText().toString() + otpNumberSix.getText().toString();

                    PhoneAuthCredential credential = PhoneAuthProvider.getCredential(mVerificationId, otp);

                    verifyAuthentication(credential);

                    FirebaseFirestoreSettings settings = new FirebaseFirestoreSettings.Builder()
                            .build();
                    mDb.setFirestoreSettings(settings);
                    DocumentReference newUserRef = mDb
                            .collection(getString(R.string.collection_users))
                            .document(FirebaseAuth.getInstance().getUid());

                    newUserRef.update("phoneNumber", phoneNumber).addOnCompleteListener(new OnCompleteListener<Void>() {
                        @Override
                        public void onComplete(@NonNull Task<Void> task) {
                            if(task.isSuccessful()){


                                //Toast.makeText(ValidatePhoneActivity.this, "Update phone number successful", Toast.LENGTH_LONG).show();

                                Intent intent = new Intent(ValidatePhoneActivity.this, CCCDActivity.class);
                                startActivity(intent);
                            }
                        }
                    });
                }
            }
        });


        SendOtpCode(phoneNumber);

        tvResend.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                ReSendOtpCode(phoneNumber);
          }

        });

    }

    private void VerifyPhoneNumber(String phoneNumber){
        PhoneAuthOptions options = PhoneAuthOptions.newBuilder(mAuth)
                .setPhoneNumber(phoneNumber)
                .setTimeout(15L, TimeUnit.SECONDS)
                .setActivity(this)
                .setCallbacks(new PhoneAuthProvider.OnVerificationStateChangedCallbacks() {
                    @Override
                    public void onVerificationCompleted(@NonNull PhoneAuthCredential phoneAuthCredential) {
                        verifyAuthentication(phoneAuthCredential);
                        tvResend.setVisibility(View.GONE);
                    }
                    @Override
                    public void onVerificationFailed(@NonNull FirebaseException e) {
                        Toast.makeText(ValidatePhoneActivity.this, "OTP Verification Failed.", Toast.LENGTH_SHORT).show();
                    }
                    @Override
                    public void onCodeSent(@NonNull String verificationId, @NonNull PhoneAuthProvider.ForceResendingToken forceResendingToken) {
                        super.onCodeSent(verificationId, forceResendingToken);
                        Toast.makeText(ValidatePhoneActivity.this, "Đã gửi OTP xác thực", Toast.LENGTH_SHORT).show();
                        mVerificationId = verificationId;
                        mResendToken = forceResendingToken;
                        tvResend.setVisibility(View.GONE);

                    }
                    @Override
                    public void onCodeAutoRetrievalTimeOut(@NonNull String s) {
                        super.onCodeAutoRetrievalTimeOut(s);
                        tvResend.setVisibility(View.VISIBLE);
                    }
                })
                .build();
        PhoneAuthProvider.verifyPhoneNumber(options);
    }
    private void ReSendOtpCode(String phoneNumber) {
        VerifyPhoneNumber(phoneNumber);
    }

    private void SendOtpCode(String phoneNumber) {
        VerifyPhoneNumber(phoneNumber);
    }
    public void verifyAuthentication(PhoneAuthCredential credential){
        firebaseAuth.getCurrentUser()
                .linkWithCredential(credential)
                .addOnSuccessListener(new OnSuccessListener<AuthResult>() {
            @Override
            public void onSuccess(AuthResult authResult) {
                // send to dashboard.
                Toast.makeText(ValidatePhoneActivity.this, "Đã gửi OTP xác thực", Toast.LENGTH_SHORT).show();
            }
        });
    }

    public void validateField(EditText field){
        if(field.getText().toString().isEmpty()){
            field.setError("Cần nhập OTP");
            otpValid = false;
        }else {
            otpValid = true;
        }
    }
    private void initUI() {
        otpNumberOne = findViewById(R.id.otpNumberOne);
        getOtpNumberTwo = findViewById(R.id.otpNumberTwo);
        getOtpNumberThree = findViewById(R.id.otpNumberThree);
        getOtpNumberFour = findViewById(R.id.otpNumberFour);
        getOtpNumberFive = findViewById(R.id.otpNumberFive);
        otpNumberSix = findViewById(R.id.optNumberSix);
        btnSendCode = findViewById(R.id.btn_signup);
        tvResend = findViewById(R.id.tvResend);
    }
}
**/

package com.uit.carrental.Service.UserAuthentication;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.uit.carrental.R;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.firebase.FirebaseException;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.PhoneAuthCredential;
import com.google.firebase.auth.PhoneAuthOptions;
import com.google.firebase.auth.PhoneAuthProvider;
import com.google.firebase.firestore.FirebaseFirestore;

import java.util.concurrent.TimeUnit;

public class ValidatePhoneActivity extends AppCompatActivity {

    private EditText otpNumberOne, getOtpNumberTwo, getOtpNumberThree, getOtpNumberFour, getOtpNumberFive, otpNumberSix;
    private Button btnSendCode;
    private TextView tvResend;
    private String mVerificationId;
    PhoneAuthProvider.ForceResendingToken mResendToken;
    String phoneNumber;
    Boolean otpValid = true;
    private FirebaseAuth mAuth;
    FirebaseAuth firebaseAuth;
    private FirebaseFirestore mDb;
    PhoneAuthCredential phoneAuthCredential;

    boolean bypassTestMode = false; // Dùng để bỏ qua xác thực OTP khi cần test

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_validate_phone);

        initUI();
        Intent data = getIntent();
        phoneNumber = data.getStringExtra("phone");

        firebaseAuth = FirebaseAuth.getInstance();
        mAuth = FirebaseAuth.getInstance();
        mDb = FirebaseFirestore.getInstance();

        if (phoneNumber.startsWith("0")) {
            phoneNumber = "+84" + phoneNumber.substring(1);
        }

        if (phoneNumber.equals("+84965853014")) {
            bypassTestMode = true;
            Toast.makeText(this, "Test mode enabled, skipping OTP", Toast.LENGTH_SHORT).show();

            mDb.collection(getString(R.string.collection_users))
                    .document(FirebaseAuth.getInstance().getUid())
                    .update("phoneNumber", phoneNumber)
                    .addOnCompleteListener(task -> {
                        if (task.isSuccessful()) {
                            startActivity(new Intent(this, CCCDActivity.class));
                            finish();
                        }
                    });
            return;
        }

        SendOtpCode(phoneNumber);

        btnSendCode.setOnClickListener(view -> {
            if (bypassTestMode) return;

            validateField(otpNumberOne);
            validateField(getOtpNumberTwo);
            validateField(getOtpNumberThree);
            validateField(getOtpNumberFour);
            validateField(getOtpNumberFive);
            validateField(otpNumberSix);

            if (otpValid) {
                String otp = otpNumberOne.getText().toString()
                        + getOtpNumberTwo.getText().toString()
                        + getOtpNumberThree.getText().toString()
                        + getOtpNumberFour.getText().toString()
                        + getOtpNumberFive.getText().toString()
                        + otpNumberSix.getText().toString();

                if (mVerificationId == null || otp.isEmpty()) {
                    Toast.makeText(this, "Không thể tạo PhoneAuthCredential: thiếu mã OTP.", Toast.LENGTH_SHORT).show();
                    return;
                }

                PhoneAuthCredential credential = PhoneAuthProvider.getCredential(mVerificationId, otp);
                verifyAuthentication(credential);

                mDb.collection(getString(R.string.collection_users))
                        .document(FirebaseAuth.getInstance().getUid())
                        .update("phoneNumber", phoneNumber)
                        .addOnCompleteListener(task -> {
                            if (task.isSuccessful()) {
                                startActivity(new Intent(this, CCCDActivity.class));
                            }
                        });
            }
        });

        tvResend.setOnClickListener(view -> ReSendOtpCode(phoneNumber));
    }

    private void VerifyPhoneNumber(String phoneNumber){
        PhoneAuthOptions options = PhoneAuthOptions.newBuilder(mAuth)
                .setPhoneNumber(phoneNumber)
                .setTimeout(15L, TimeUnit.SECONDS)
                .setActivity(this)
                .setCallbacks(new PhoneAuthProvider.OnVerificationStateChangedCallbacks() {
                    @Override
                    public void onVerificationCompleted(@NonNull PhoneAuthCredential phoneAuthCredential) {
                        verifyAuthentication(phoneAuthCredential);
                        tvResend.setVisibility(View.GONE);
                    }
                    @Override
                    public void onVerificationFailed(@NonNull FirebaseException e) {
                        Toast.makeText(ValidatePhoneActivity.this, "OTP Verification Failed.", Toast.LENGTH_SHORT).show();
                    }
                    @Override
                    public void onCodeSent(@NonNull String verificationId, @NonNull PhoneAuthProvider.ForceResendingToken forceResendingToken) {
                        super.onCodeSent(verificationId, forceResendingToken);
                        Toast.makeText(ValidatePhoneActivity.this, "Đã gửi OTP xác thực", Toast.LENGTH_SHORT).show();
                        mVerificationId = verificationId;
                        mResendToken = forceResendingToken;
                        tvResend.setVisibility(View.GONE);
                    }
                    @Override
                    public void onCodeAutoRetrievalTimeOut(@NonNull String s) {
                        super.onCodeAutoRetrievalTimeOut(s);
                        tvResend.setVisibility(View.VISIBLE);
                    }
                })
                .build();
        PhoneAuthProvider.verifyPhoneNumber(options);
    }

    private void ReSendOtpCode(String phoneNumber) {
        VerifyPhoneNumber(phoneNumber);
    }

    private void SendOtpCode(String phoneNumber) {
        VerifyPhoneNumber(phoneNumber);
    }

    public void verifyAuthentication(PhoneAuthCredential credential){
        firebaseAuth.getCurrentUser()
                .linkWithCredential(credential)
                .addOnSuccessListener(new OnSuccessListener<AuthResult>() {
                    @Override
                    public void onSuccess(AuthResult authResult) {
                        Toast.makeText(ValidatePhoneActivity.this, "Đã gửi OTP xác thực", Toast.LENGTH_SHORT).show();
                    }
                });
    }

    public void validateField(EditText field){
        if(field.getText().toString().isEmpty()){
            field.setError("Cần nhập OTP");
            otpValid = false;
        }else {
            otpValid = true;
        }
    }

    private void initUI() {
        otpNumberOne = findViewById(R.id.otpNumberOne);
        getOtpNumberTwo = findViewById(R.id.otpNumberTwo);
        getOtpNumberThree = findViewById(R.id.otpNumberThree);
        getOtpNumberFour = findViewById(R.id.otpNumberFour);
        getOtpNumberFive = findViewById(R.id.otpNumberFive);
        otpNumberSix = findViewById(R.id.optNumberSix);
        btnSendCode = findViewById(R.id.btn_signup);
        tvResend = findViewById(R.id.tvResend);
    }
}
```

### Service\Vehicle\AddVehicleActivity.java
```java
package com.uit.carrental.Service.Vehicle;

import androidx.activity.result.ActivityResultCallback;
import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.app.ProgressDialog;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.Toast;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;
import com.uit.carrental.ActivityPages.OwnerMainActivity;
import com.uit.carrental.Model.User;
import com.uit.carrental.Model.Vehicle;
import com.uit.carrental.R;
import com.uit.carrental.Service.Api.CloudinaryApi;

import java.util.HashMap;
import java.util.Map;

public class AddVehicleActivity extends AppCompatActivity {
    private FirebaseUser firebaseUser;
    private String downloadUrl;
    private Uri mImageURI;
    private EditText vehicle_name, vehicle_seats, vehicle_price, vehicle_owner, vehicle_number;
    private Button btnAdd;
    private ImageView vehicle_imgView;
    private FirebaseFirestore dtb_vehicle, dtb_user, dtb_update;
    private User user = new User();
    private Vehicle vehicle = new Vehicle();
    private ProgressDialog progressDialog;

    ActivityResultLauncher<String> pickImagesFromGallery = registerForActivityResult(
            new ActivityResultContracts.GetContent(),
            new ActivityResultCallback<Uri>() {
                @Override
                public void onActivityResult(Uri result) {
                    if (result != null) {
                        mImageURI = result;
                        vehicle_imgView.setImageURI(result);
                    }
                }
            });

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_add_vehicle);
        if (getSupportActionBar() != null) getSupportActionBar().hide();

        init();

        btnAdd.setOnClickListener(view -> {
            if (FullFill()) {
                if (mImageURI != null) {
                    uploadImageAndAddVehicle();
                } else {
                    toast("Vui lòng chọn hình ảnh cho xe.");
                }
            } else {
                toast("Vui lòng nhập đủ thông tin.");
            }
        });

        vehicle_imgView.setOnClickListener(v -> pickImagesFromGallery.launch("image/*"));
    }

    private void init() {
        vehicle_name = findViewById(R.id.et_name);
        vehicle_seats = findViewById(R.id.et_seats);
        vehicle_price = findViewById(R.id.et_price);
        vehicle_owner = findViewById(R.id.et_owner);
        vehicle_number = findViewById(R.id.et_number);
        vehicle_imgView = findViewById(R.id.img_view);
        btnAdd = findViewById(R.id.btn_add);

        try {
            dtb_vehicle = FirebaseFirestore.getInstance();
            dtb_user = FirebaseFirestore.getInstance();
            dtb_update = FirebaseFirestore.getInstance();
            firebaseUser = FirebaseAuth.getInstance().getCurrentUser();
            if (firebaseUser != null) {
                user.setUser_id(firebaseUser.getUid());
            } else {
                toast("Người dùng chưa đăng nhập");
            }
        } catch (Exception e) {
            toast("Lỗi khởi tạo Firebase: " + e.getMessage());
            dtb_vehicle = null;
            dtb_user = null;
            dtb_update = null;
        }

        // Khởi tạo CloudinaryApi
        CloudinaryApi.init(this);
    }

    private void uploadImageAndAddVehicle() {
        if (mImageURI == null) {
            toast("Vui lòng chọn hình ảnh cho xe.");
            return;
        }

        progressDialog = ProgressDialog.show(this, "Uploading Image", "Please wait...", true);

        CloudinaryApi.uploadImage(this, mImageURI, new CloudinaryApi.UploadCallbackCustom() {
            @Override
            public void onSuccess(String url) {
                downloadUrl = url;
                if (progressDialog != null) progressDialog.dismiss();
                if (downloadUrl != null) {
                    addVehicle();
                } else {
                    toast("Lỗi: Không nhận được URL ảnh.");
                }
            }

            @Override
            public void onFailure(Exception e) {
                if (progressDialog != null) progressDialog.dismiss();
                toast("Lỗi tải ảnh: " + e.getMessage());
            }
        });
    }

    private void addVehicle() {
        if (dtb_user == null || dtb_vehicle == null) {
            toast("Lỗi Firebase Firestore, không thể thêm xe.");
            return;
        }

        new Thread(() -> {
            dtb_user.collection("Users")
                    .whereEqualTo("user_id", user.getUser_id())
                    .get()
                    .addOnCompleteListener(task -> {
                        runOnUiThread(() -> {
                            if (task.isSuccessful()) {
                                for (QueryDocumentSnapshot document : task.getResult()) {
                                    vehicle.setProvider_id(document.getString("user_id"));
                                    vehicle.setProvider_name(document.getString("username"));
                                    vehicle.setProvider_address(document.getString("address") + " " + document.getString("city"));
                                    vehicle.setProvider_gmail(document.getString("email"));
                                    vehicle.setProvider_phone(document.getString("phoneNumber"));

                                    vehicle.setVehicle_name(vehicle_name.getText().toString());
                                    vehicle.setVehicle_seats(vehicle_seats.getText().toString());
                                    vehicle.setVehicle_price(vehicle_price.getText().toString() + " VND");
                                    vehicle.setOwner_name(vehicle_owner.getText().toString());
                                    vehicle.setVehicle_number(vehicle_number.getText().toString());
                                    vehicle.setVehicle_availability("available");
                                    vehicle.setVehicle_imageURL(downloadUrl);

                                    dtb_vehicle.collection("Vehicles")
                                            .add(vehicle)
                                            .addOnSuccessListener(documentReference -> {
                                                vehicle.setVehicle_id(documentReference.getId());
                                                updateVehicleId(vehicle.getVehicle_id());
                                                startActivity(new Intent(AddVehicleActivity.this, OwnerMainActivity.class));
                                                finish();
                                                toast("Thêm xe thành công");
                                            })
                                            .addOnFailureListener(e -> toast("Thêm xe thất bại: " + e.getMessage()));
                                }
                            } else {
                                toast("Không thể lấy thông tin người dùng");
                            }
                        });
                    });
        }).start();
    }

    private void updateVehicleId(String vehicle_id) {
        if (dtb_update == null) {
            toast("Lỗi Firebase Firestore, không thể cập nhật ID xe.");
            return;
        }

        Map<String, Object> data = new HashMap<>();
        data.put("vehicle_id", vehicle_id);

        dtb_update.collection("Vehicles").document(vehicle_id)
                .update(data)
                .addOnSuccessListener(aVoid -> toast("Cập nhật ID xe thành công"))
                .addOnFailureListener(e -> toast("Cập nhật ID xe thất bại: " + e.getMessage()));
    }

    private boolean FullFill() {
        return !vehicle_name.getText().toString().isEmpty()
                && !vehicle_owner.getText().toString().isEmpty()
                && !vehicle_number.getText().toString().isEmpty()
                && !vehicle_price.getText().toString().isEmpty()
                && !vehicle_seats.getText().toString().isEmpty();
    }

    private void toast(String txt) {
        Toast.makeText(getApplicationContext(), txt, Toast.LENGTH_LONG).show();
    }
}
```

### Service\Vehicle\UpdateVehicle.java
```java
package com.uit.carrental.Service.Vehicle;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.uit.carrental.Model.Vehicle;
import com.uit.carrental.R;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;
import com.google.firebase.firestore.SetOptions;
import com.squareup.picasso.Picasso;

import java.util.HashMap;
import java.util.Map;

public class UpdateVehicle extends AppCompatActivity {

    private ImageView vehicleImage;
    private TextView vehicleName, vehiclePrice, vehicleNumber, vehicleSeats, vehicleOwner;
    private Button btnUpdate, btnDelete;

    private String vehicleID;

    private FirebaseFirestore dtb_vehicle;
    private Vehicle vehicle = new Vehicle();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_update_vehicle);
        if (getSupportActionBar() != null) {
            getSupportActionBar().hide();
        }
        Intent intent = getIntent();
        vehicleID = intent.getStringExtra("vehicle_id");
        vehicle.setVehicle_id(vehicleID);

        init();

        getDetail();

        btnUpdate.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                update();
            }
        });
        btnDelete.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                delete();
            }
        });

    }
    private void init()
    {
        btnUpdate = findViewById(R.id.btn_updatevehicle);
        btnDelete = findViewById(R.id.btn_deletevehicle);
// -------------------------------------------------
        vehicleName = findViewById(R.id.et_vehiclename);
        vehicleNumber = findViewById(R.id.et_platenumber);
        vehicleSeats = findViewById(R.id.et_vehicleseats);
        vehiclePrice = findViewById(R.id.et_vehicleprice);
        vehicleOwner = findViewById(R.id.et_vehicleowner);
//--------------------------------------------------
        vehicleImage = findViewById(R.id.img_view);
//--------------------------------------------------
        dtb_vehicle = FirebaseFirestore.getInstance();
        vehicleName.setEnabled(false);
    }
    private void getDetail() {
        dtb_vehicle.collection("Vehicles")
                .whereEqualTo("vehicle_id", vehicle.getVehicle_id())
                .get()
                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<QuerySnapshot> task) {
                        if (task.isSuccessful()) {
                            for (QueryDocumentSnapshot document : task.getResult()) {

                                vehicle.setProvider_id(document.get("provider_id").toString());
                                vehicle.setVehicle_id(document.get("vehicle_id").toString());
                                vehicle.setVehicle_availability(document.get("vehicle_availability").toString());

                                vehicle.setVehicle_name(document.get("vehicle_name").toString());
                                vehicleName.setText(vehicle.getVehicle_name());

                                vehicle.setVehicle_price(document.get("vehicle_price").toString());
                                vehiclePrice.setText(vehicle.getVehicle_price());

                                vehicle.setVehicle_seats(document.get("vehicle_seats").toString());
                                vehicleSeats.setText(vehicle.getVehicle_seats());

                                vehicle.setOwner_name(document.get("owner_name").toString());
                                vehicleOwner.setText(vehicle.getOwner_name());

                                vehicle.setVehicle_number(document.get("vehicle_number").toString());
                                vehicleNumber.setText(vehicle.getVehicle_number());

                                vehicle.setVehicle_imageURL(document.get("vehicle_imageURL").toString());

                                if (!document.get("vehicle_imageURL").toString().isEmpty()) {
                                    vehicle.setVehicle_imageURL(document.get("vehicle_imageURL").toString());
                                    Picasso.get().load(vehicle.getVehicle_imageURL()).into(vehicleImage);
                                }
                                else {
                                    vehicle.setVehicle_imageURL("");
                                }

                            }

                        }
                    }
                });
    }
    private void update(){
        Map<String, Object> data = new HashMap<>();
        Boolean flag = false;
        String platenumber = vehicleNumber.getText().toString();
        String seats = vehicleSeats.getText().toString();
        String price = vehiclePrice.getText().toString();
        String ownername = vehicleOwner.getText().toString();

        if (!platenumber.equals(vehicle.getVehicle_number())){
            data.put("vehicle_number",platenumber);
            flag = true;
        }
        if (!seats.equals(vehicle.getVehicle_seats())){
            data.put("vehicle_seats", seats);
            flag = true;
        }
        if (!price.equals(vehicle.getVehicle_price())){
            data.put("vehicle_price", price);
            flag = true;
        }
        if (!ownername.equals(vehicle.getOwner_name())){
            data.put("owner_name", ownername);
            flag = true;
        }
        if (flag) {
            dtb_vehicle.collection("Vehicles")
                    .document(vehicleID)
                    .set(data, SetOptions.merge())
                    .addOnFailureListener(new OnFailureListener() {
                        @Override
                        public void onFailure(@NonNull Exception e) {
                            Toast.makeText(UpdateVehicle.this, "Không thể cập nhật thông tin", Toast.LENGTH_LONG).show();
                            return;
                        }
                    })
                    .addOnSuccessListener(new OnSuccessListener<Void>() {
                        @Override
                        public void onSuccess(Void unused) {
                            Toast.makeText(UpdateVehicle.this, "Câp nhật thông tin thành công", Toast.LENGTH_LONG).show();
                            finish();
                        }
                    });
        }
    }
    private void delete(){
        dtb_vehicle.collection("Vehicles")
                .document(vehicleID)
                .delete()
                .addOnSuccessListener(new OnSuccessListener<Void>() {
                    @Override
                    public void onSuccess(Void aVoid) {
                        Log.d("Delete Vehicle", "Xóa xe thành công");
                        Toast.makeText(UpdateVehicle.this, "Xóa xe thành công", Toast.LENGTH_LONG).show();
                    }
                })
                .addOnFailureListener(new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {
                        Log.w("Delete Vehicle", "Không thể xóa xe", e);
                        Toast.makeText(UpdateVehicle.this, "Không thể xóa xe", Toast.LENGTH_LONG).show();
                    }
                });
    }
}
```

### Service\Vehicle\VehicleCardActivity.java
```java
package com.uit.carrental.Service.Vehicle;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.os.Bundle;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.uit.carrental.Model.Vehicle;
import com.uit.carrental.R;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageReference;
import com.squareup.picasso.Picasso;

public class VehicleCardActivity extends AppCompatActivity {

    FirebaseFirestore dtb;
    String id;
    private ImageView imgCar;
    private VehicleCardActivity mMainActivity = this;
    private FirebaseStorage storage;
    TextView vehicle_name, vehicle_price;

    Vehicle temp = new Vehicle();

    @Override
    protected void onCreate(Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);
        setContentView(R.layout.vehicle_card);

        StorageReference storageRef = storage.getReference();


        vehicle_name = findViewById(R.id.vehicle_name);
        vehicle_price = findViewById(R.id.tv_vehicle_price);
        imgCar = findViewById(R.id.img_vehicle);

        dtb = FirebaseFirestore.getInstance();
        dtb.collection("Vehicles")
                .get()
                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<QuerySnapshot> task) {
                        if (task.isSuccessful()) {
                            for (QueryDocumentSnapshot document : task.getResult()) {
                                temp.setVehicle_id(document.getId());
                                temp.setVehicle_name(document.get("vehicle_name").toString());
                                temp.setVehicle_price(document.get("vehicle_price").toString());
                                temp.setVehicle_imageURL(document.get("imageURL").toString());

                                Picasso.get().load(temp.getVehicle_imageURL()).into(imgCar);

                                vehicle_name.setText(temp.getVehicle_name());
                                vehicle_price.setText(temp.getVehicle_price());

                            }
                        } else {
                            Toast.makeText(VehicleCardActivity.this, "Error getting documents ", Toast.LENGTH_LONG).show();
                        }
                    }
                });

    }
}
```

### Service\Vehicle\VehicleDetailActivity.java
```java
package com.uit.carrental.Service.Vehicle;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;
import com.squareup.picasso.Picasso;
import com.uit.carrental.Model.Vehicle;
import com.uit.carrental.R;
import com.uit.carrental.Service.Booking.ScheduleSelect;

public class VehicleDetailActivity extends AppCompatActivity {

    private ImageView vehicleImage, backButton;
    private TextView vehicleName, vehiclePrice, fuelValue, speedValue, transmissionValue, seatsValue;
    private TextView providerName, providerPhone, providerGmail, providerAddress, vehicleOwner, vehicleNumber;
    private Button btnBook;
    private String vehicleID;
    private FirebaseFirestore dtbVehicle;
    private Vehicle vehicle = new Vehicle();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_detail_car);

        Intent intent = getIntent();
        vehicleID = intent.getStringExtra("vehicle_id");
        vehicle.setVehicle_id(vehicleID);

        init();

        getDetail();

        btnBook.setOnClickListener(v -> {
            Intent i = new Intent(VehicleDetailActivity.this, ScheduleSelect.class);
            i.putExtra("vehicle_id", vehicleID);
            startActivity(i);
        });

        backButton.setOnClickListener(v -> finish());
    }

    private void init() {
        btnBook = findViewById(R.id.btn_book);
        vehicleImage = findViewById(R.id.vehicle_img);
        backButton = findViewById(R.id.back_button);
        vehicleName = findViewById(R.id.vehicle_name);
        vehiclePrice = findViewById(R.id.tv_vehicle_price);
        fuelValue = findViewById(R.id.fuel_value);
        speedValue = findViewById(R.id.speed_value);
        transmissionValue = findViewById(R.id.transmission_value);
        seatsValue = findViewById(R.id.seats_value);
        providerName = findViewById(R.id.tv_provider_name);
        providerPhone = findViewById(R.id.tv_provider_phone);
        providerGmail = findViewById(R.id.tv_provider_gmail);
        providerAddress = findViewById(R.id.tv_provider_address);
        vehicleOwner = findViewById(R.id.tv_vehicle_owner);
        vehicleNumber = findViewById(R.id.tv_vehicle_number);
        dtbVehicle = FirebaseFirestore.getInstance();
    }

    private void getDetail() {
        dtbVehicle.collection("Vehicles")
                .whereEqualTo("vehicle_id", vehicle.getVehicle_id())
                .get()
                .addOnCompleteListener(task -> {
                    if (task.isSuccessful()) {
                        for (QueryDocumentSnapshot document : task.getResult()) {
                            vehicle.setVehicle_id(document.getString("vehicle_id"));
                            vehicle.setVehicle_name(document.getString("vehicle_name"));
                            vehicle.setVehicle_price(document.getString("vehicle_price"));
                            vehicle.setVehicle_imageURL(document.getString("vehicle_imageURL"));
                            vehicle.setFuel_type(document.getString("fuel_type"));
                            vehicle.setMax_speed(document.getString("max_speed"));
                            vehicle.setTransmission(document.getString("transmission"));
                            vehicle.setDoors_seats(document.getString("doors_seats"));
                            vehicle.setProvider_name(document.getString("provider_name"));
                            vehicle.setProvider_phone(document.getString("provider_phone"));
                            vehicle.setProvider_gmail(document.getString("provider_gmail"));
                            vehicle.setProvider_address(document.getString("provider_address"));
                            vehicle.setOwner_name(document.getString("owner_name"));
                            vehicle.setVehicle_number(document.getString("vehicle_number"));

                            // Set UI
                            vehicleName.setText(vehicle.getVehicle_name() != null ? vehicle.getVehicle_name() : "Mercedes C300 AMG");
                            vehiclePrice.setText(vehicle.getVehicle_price() != null ? vehicle.getVehicle_price() : "999.000VNĐ/Ngày");
                            fuelValue.setText(vehicle.getFuel_type() != null ? vehicle.getFuel_type() : "Xăng không chì 95+");
                            speedValue.setText(vehicle.getMax_speed() != null ? vehicle.getMax_speed() : "250 km/h");
                            transmissionValue.setText(vehicle.getTransmission() != null ? vehicle.getTransmission() : "Tự động 9 cấp");
                            seatsValue.setText(vehicle.getDoors_seats() != null ? vehicle.getDoors_seats() : "2 Cửa & 4 Ghế");
                            providerName.setText(vehicle.getProvider_name() != null ? vehicle.getProvider_name() : "Công ty ABC");
                            providerPhone.setText(vehicle.getProvider_phone() != null ? vehicle.getProvider_phone() : "0123456789");
                            providerGmail.setText(vehicle.getProvider_gmail() != null ? vehicle.getProvider_gmail() : "abc@example.com");
                            providerAddress.setText(vehicle.getProvider_address() != null ? vehicle.getProvider_address() : "123 Đường ABC, Đồng Nai");
                            vehicleOwner.setText(vehicle.getOwner_name() != null ? vehicle.getOwner_name() : "Nguyễn Văn A");
                            vehicleNumber.setText(vehicle.getVehicle_number() != null ? vehicle.getVehicle_number() : "60C2-88888");

                            if (vehicle.getVehicle_imageURL() != null && !vehicle.getVehicle_imageURL().isEmpty()) {
                                Picasso.get().load(vehicle.getVehicle_imageURL()).into(vehicleImage);
                            }
                        }
                    }
                });
    }
}
```

### Service\ZaloPay\Api\CreateOrder.java
```java
package com.uit.carrental.Service.ZaloPay.Api;

import com.uit.carrental.Service.ZaloPay.Constant.AppInfo;
import com.uit.carrental.Service.ZaloPay.Helper.Helpers;

import org.json.JSONObject;

import java.util.Date;

import okhttp3.FormBody;
import okhttp3.RequestBody;

public class CreateOrder {
    private class CreateOrderData {
        String AppId;
        String AppUser;
        String AppTime;
        String Amount;
        String AppTransId;
        String EmbedData;
        String Items;
        String BankCode;
        String Description;
        String Mac;

        private CreateOrderData(String amount) throws Exception {
            long appTime = new Date().getTime();
            AppId = String.valueOf(AppInfo.APP_ID);
            AppUser = "Android_Demo";
            AppTime = String.valueOf(appTime);
            Amount = amount;
            AppTransId = Helpers.getAppTransId();
            EmbedData = "{}";
            Items = "[]";
            BankCode = "zalopayapp";
            Description = "Merchant pay for order #" + Helpers.getAppTransId();
            String inputHMac = String.format("%s|%s|%s|%s|%s|%s|%s",
                    this.AppId,
                    this.AppTransId,
                    this.AppUser,
                    this.Amount,
                    this.AppTime,
                    this.EmbedData,
                    this.Items);

            Mac = Helpers.getMac(AppInfo.MAC_KEY, inputHMac);
        }
    }

     public JSONObject createOrder(String amount) throws Exception {
        CreateOrderData input = new CreateOrderData(amount);

        RequestBody formBody = new FormBody.Builder()
                .add("appid", input.AppId)
                .add("appuser", input.AppUser)
                .add("apptime", input.AppTime)
                .add("amount", input.Amount)
                .add("apptransid", input.AppTransId)
                .add("embeddata", input.EmbedData)
                .add("item", input.Items)
                .add("bankcode", input.BankCode)
                .add("description", input.Description)
                .add("mac", input.Mac)
                .build();

        JSONObject data = HttpProvider.sendPost(AppInfo.URL_CREATE_ORDER, formBody);
        return data;
    }
}


```

### Service\ZaloPay\Api\HttpProvider.java
```java
package com.uit.carrental.Service.ZaloPay.Api;

import android.util.Log;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.util.Collections;
import java.util.concurrent.TimeUnit;

import okhttp3.CipherSuite;
import okhttp3.ConnectionSpec;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.TlsVersion;

public class HttpProvider {
     public static JSONObject sendPost(String URL, RequestBody formBody) {
        JSONObject data = new JSONObject();
        try {
            ConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
                    .tlsVersions(TlsVersion.TLS_1_2)
                    .cipherSuites(
                            CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
                            CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
                            CipherSuite.TLS_DHE_RSA_WITH_AES_128_GCM_SHA256)
                    .build();

            OkHttpClient client = new OkHttpClient.Builder()
                    .connectionSpecs(Collections.singletonList(spec))
                    .callTimeout(5000, TimeUnit.MILLISECONDS)
                    .build();

            Request request = new Request.Builder()
                    .url(URL)
                    .addHeader("Content-Type", "application/x-www-form-urlencoded")
                    .post(formBody)
                    .build();

            Response response = client.newCall(request).execute();

            if (!response.isSuccessful()) {
                Log.println(Log.ERROR, "BAD_REQUEST", response.body().string());
                data = null;
            } else {
                data = new JSONObject(response.body().string());
            }

        }  catch (IOException | JSONException e) {
            e.printStackTrace();
        }

        return data;
    }
}

```

### Service\ZaloPay\Constant\AppInfo.java
```java
package com.uit.carrental.Service.ZaloPay.Constant;

public class AppInfo {
    public static final int APP_ID = 553;
    public static final String MAC_KEY = "9phuAOYhan4urywHTh0ndEXiV3pKHr5Q";
    public static final String URL_CREATE_ORDER = "https://sandbox.zalopay.com.vn/v001/tpe/createorder";
}

```

### Service\ZaloPay\Helper\Helpers.java
```java
package com.uit.carrental.Service.ZaloPay.Helper;

import android.annotation.SuppressLint;

import com.uit.carrental.Service.ZaloPay.Helper.HMac.HMacUtil;

import org.jetbrains.annotations.NotNull;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Objects;

public class Helpers {
    private static int transIdDefault = 1;

    @NotNull
    @SuppressLint("DefaultLocale")
     public static String getAppTransId() {
        if (transIdDefault >= 100000) {
            transIdDefault = 1;
        }

        transIdDefault += 1;
        @SuppressLint("SimpleDateFormat") SimpleDateFormat formatDateTime = new SimpleDateFormat("yyMMdd_hhmmss");
        String timeString = formatDateTime.format(new Date());
        return String.format("%s%06d", timeString, transIdDefault);
    }

    @NotNull
    public static String getMac(@NotNull String key, @NotNull String data) throws NoSuchAlgorithmException, InvalidKeyException {
        return Objects.requireNonNull(HMacUtil.HMacHexStringEncode(HMacUtil.HMACSHA256, key, data));
     }
}

```

### Service\ZaloPay\Helper\HMac\HexStringUtil.java
```java
package com.uit.carrental.Service.ZaloPay.Helper.HMac;

import java.util.Locale;

public class HexStringUtil {
    private static final byte[] HEX_CHAR_TABLE = {
            (byte) '0', (byte) '1', (byte) '2', (byte) '3',
            (byte) '4', (byte) '5', (byte) '6', (byte) '7',
            (byte) '8', (byte) '9', (byte) 'a', (byte) 'b',
            (byte) 'c', (byte) 'd', (byte) 'e', (byte) 'f'
    };
    // @formatter:on

    /**
     * Convert a byte array to a hexadecimal string
     *
     * @param raw
     *            A raw byte array
     *
     * @return Hexadecimal string
     */
    public static String byteArrayToHexString(byte[] raw) {
        byte[] hex = new byte[2 * raw.length];
        int index = 0;

        for (byte b : raw) {
            int v = b & 0xFF;
            hex[index++] = HEX_CHAR_TABLE[v >>> 4];
            hex[index++] = HEX_CHAR_TABLE[v & 0xF];
        }
        return new String(hex);
    }

    /**
     * Convert a hexadecimal string to a byte array
     *
     * @param hex
     *            A hexadecimal string
     *
     * @return The byte array
     */
    public static byte[] hexStringToByteArray(String hex) {
        String hexstandard = hex.toLowerCase(Locale.ENGLISH);
        int sz = hexstandard.length() / 2;
        byte[] bytesResult = new byte[sz];

        int idx = 0;
        for (int i = 0; i < sz; i++) {
            bytesResult[i] = (byte) (hexstandard.charAt(idx));
            ++idx;
            byte tmp = (byte) (hexstandard.charAt(idx));
            ++idx;

            if (bytesResult[i] > HEX_CHAR_TABLE[9]) {
                bytesResult[i] -= ((byte) ('a') - 10);
            } else {
                bytesResult[i] -= (byte) ('0');
            }
            if (tmp > HEX_CHAR_TABLE[9]) {
                tmp -= ((byte) ('a') - 10);
            } else {
                tmp -= (byte) ('0');
            }

            bytesResult[i] = (byte) (bytesResult[i] * 16 + tmp);
        }
        return bytesResult;
    }
}

```

### Service\ZaloPay\Helper\HMac\HMacUtil.java
```java
package com.uit.carrental.Service.ZaloPay.Helper.HMac;

import android.os.Build;

import androidx.annotation.RequiresApi;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.Base64;
import java.util.LinkedList;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

public class HMacUtil {
    public final static String HMACMD5 = "HmacMD5";
    public final static String HMACSHA1 = "HmacSHA1";
    public final static String HMACSHA256 = "HmacSHA256";
    public final static String HMACSHA512 = "HmacSHA512";
    public final static Charset UTF8CHARSET = StandardCharsets.UTF_8;

    public final static LinkedList<String> HMACS = new LinkedList<String>(Arrays.asList("UnSupport", "HmacSHA256", "HmacMD5", "HmacSHA384", "HMacSHA1", "HmacSHA512"));
    // @formatter:on

    private static byte[] HMacEncode(final String algorithm, final String key, final String data) {
        Mac macGenerator = null;
        try {
            macGenerator = Mac.getInstance(algorithm);
            SecretKeySpec signingKey = new SecretKeySpec(key.getBytes(StandardCharsets.UTF_8), algorithm);
            macGenerator.init(signingKey);
        } catch (Exception ex) {
        }

        if (macGenerator == null) {
            return null;
        }

        byte[] dataByte = null;
        try {
            dataByte = data.getBytes("UTF-8");
        } catch (UnsupportedEncodingException e) {
        }

        return macGenerator.doFinal(dataByte);
    }

    /**
     * Calculating a message authentication code (MAC) involving a cryptographic
     * hash function in combination with a secret cryptographic key.
     *
     * The result will be represented base64-encoded string.
     *
     * @param algorithm A cryptographic hash function (such as MD5 or SHA-1)
     *
     * @param key A secret cryptographic key
     *
     * @param data The message to be authenticated
     *
     * @return Base64-encoded HMAC String
     */
    @RequiresApi(api = Build.VERSION_CODES.O)
    public static String HMacBase64Encode(final String algorithm, final String key, final String data) {
        byte[] hmacEncodeBytes = HMacEncode(algorithm, key, data);
        if (hmacEncodeBytes == null) {
            return null;
        }
        return Base64.getEncoder().encodeToString(hmacEncodeBytes);
    }

    /**
     * Calculating a message authentication code (MAC) involving a cryptographic
     * hash function in combination with a secret cryptographic key.
     *
     * The result will be represented hex string.
     *
     * @param algorithm A cryptographic hash function (such as MD5 or SHA-1)
     *
     * @param key A secret cryptographic key
     *
     * @param data The message to be authenticated
     *
     * @return Hex HMAC String
     */
    public static String HMacHexStringEncode(final String algorithm, final String key, final String data) {
        byte[] hmacEncodeBytes = HMacEncode(algorithm, key, data);
        if (hmacEncodeBytes == null) {
            return null;
        }
        return HexStringUtil.byteArrayToHexString(hmacEncodeBytes);
    }
}

```
